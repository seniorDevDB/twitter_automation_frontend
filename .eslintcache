[{"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\App.js":"2","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Message.js":"3","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\CommentInbox.js":"4","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Login.js":"5","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\DashboardFunction.js":"6","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\history.js":"7","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\UserFunction.js":"8","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Navbar.js":"9","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Lead.js":"10","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Dashboard.js":"11","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\store.js":"12","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\Socket.js":"13","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\DmInbox.js":"14","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\actions\\actions.js":"15","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Report.js":"16","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\reportWebVitals.js":"17","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Landing.js":"18","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Join.js":"19","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\api.js":"20","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\TwitterAccount.js":"21","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Comment.js":"22","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\TwitterAccountInfo.js":"23","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\reducers\\index.js":"24"},{"size":646,"mtime":1613391439098,"results":"25","hashOfConfig":"26"},{"size":2760,"mtime":1619334725398,"results":"27","hashOfConfig":"26"},{"size":5757,"mtime":1621217379000,"results":"28","hashOfConfig":"26"},{"size":9824,"mtime":1620713126022,"results":"29","hashOfConfig":"26"},{"size":5561,"mtime":1618994365217,"results":"30","hashOfConfig":"26"},{"size":7763,"mtime":1621214769355,"results":"31","hashOfConfig":"26"},{"size":389,"mtime":1613391439098,"results":"32","hashOfConfig":"26"},{"size":671,"mtime":1615863577736,"results":"33","hashOfConfig":"26"},{"size":9508,"mtime":1621479815524,"results":"34","hashOfConfig":"26"},{"size":5347,"mtime":1618971807166,"results":"35","hashOfConfig":"26"},{"size":8274,"mtime":1619416885715,"results":"36","hashOfConfig":"26"},{"size":607,"mtime":1619394399042,"results":"37","hashOfConfig":"26"},{"size":630,"mtime":1621414310522,"results":"38","hashOfConfig":"26"},{"size":8864,"mtime":1620713215262,"results":"39","hashOfConfig":"26"},{"size":1882,"mtime":1619323031413,"results":"40","hashOfConfig":"26"},{"size":7626,"mtime":1622085672386,"results":"41","hashOfConfig":"26"},{"size":375,"mtime":1613391439098,"results":"42","hashOfConfig":"26"},{"size":1304,"mtime":1619049676407,"results":"43","hashOfConfig":"26"},{"size":6108,"mtime":1618992505316,"results":"44","hashOfConfig":"26"},{"size":327,"mtime":1618985201146,"results":"45","hashOfConfig":"26"},{"size":5865,"mtime":1619613874240,"results":"46","hashOfConfig":"26"},{"size":6645,"mtime":1621222170757,"results":"47","hashOfConfig":"26"},{"size":3591,"mtime":1619369739252,"results":"48","hashOfConfig":"26"},{"size":2740,"mtime":1619332094912,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"11fqzy7",{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\index.js",[],["113","114"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\App.js",["115","116"],"import React, {useEffect} from \"react\";\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\n\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nimport Dashboard from \"./pages/Dashboard\"\r\nimport Message from \"./pages/Message\"\r\nimport Comment from \"./pages/Comment\"\r\nimport Navbar from \"./pages/Navbar\";\r\nimport Login from \"./pages/Login\";\r\nimport CommentInbox from './pages/CommentInbox';\r\nimport DmInbox from './pages/DmInbox';\r\nimport Report from './pages/Report';\r\nimport Lead from './pages/Lead';\r\nimport Landing from './pages/Landing';\r\nimport Join from './pages/Join';\r\nimport TwitterAccount from './pages/TwitterAccount';\r\nimport TwitterAccountInfo from './pages/TwitterAccountInfo';\r\n\r\nimport {} from \"./api/Socket\"\r\n\r\nconst history = createBrowserHistory();\r\n\r\nfunction App() {\r\n  return (\r\n    <Router history={history}>\r\n      {localStorage.token ? (\r\n        <div className=\"App\">\r\n          <Navbar/>\r\n          <Route exact path=\"/\" component={Landing}></Route>\r\n          <Route exact path=\"/login\" component={Login}></Route>\r\n          <Route exact path=\"/join\" component={Join}></Route>\r\n          <Route exact path=\"/dashboard\" component={Dashboard}></Route>\r\n          <Route exact path=\"/message/:id/:num/:profile\" component={Message}></Route>\r\n          <Route exact path=\"/comment/:account/:username/:num/:profile\" component={Comment}></Route>\r\n          <Route exact path=\"/comment-inbox\" component={CommentInbox}></Route>\r\n          <Route exact path=\"/dm-inbox\" component={DmInbox}></Route>\r\n          <Route exact path=\"/report\" component={Report}></Route>\r\n          <Route exact path=\"/twitter_account\" component={TwitterAccount}></Route>\r\n          <Route exact path=\"/account/:username/:bot_number\" component={TwitterAccountInfo}></Route>\r\n          <Route exact path=\"/lead\" component={Lead}></Route>\r\n        </div>\r\n      ) : (\r\n        <div className=\"App\" style={{backgroundColor:\"#42389d\"}}>\r\n        <Navbar/>\r\n        <Route exact path=\"/\" component={Landing}></Route>\r\n        <Route exact path=\"/login\" component={Login}></Route>\r\n        <Route exact path=\"/join\" component={Join}></Route>\r\n        <Route exact path=\"/dashboard\" component={Dashboard}></Route>\r\n        <Route exact path=\"/message/:id/:num/:profile\" component={Message}></Route>\r\n        <Route exact path=\"/comment/:account/:username/:num/:profile\" component={Comment}></Route>\r\n        <Route exact path=\"/comment-inbox\" component={CommentInbox}></Route>\r\n        <Route exact path=\"/dm-inbox\" component={DmInbox}></Route>\r\n        <Route exact path=\"/report\" component={Report}></Route>\r\n        <Route exact path=\"/lead\" component={Lead}></Route>\r\n      </div>\r\n      )}\r\n\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["117","118"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Message.js",["119","120","121","122","123","124"],"import { keys } from \"@material-ui/core/styles/createBreakpoints\";\r\nimport React, { Component } from \"react\";\r\nimport { Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport dataReducer from \"../store/reducers\";\r\nimport { displayMsg, newMsg } from \"./../api/DashboardFunction\";\r\n\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\n\r\nclass Message extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            msg_content: \"\",\r\n            username: \"\",\r\n            bot_number: \"\",\r\n            profile: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const username = this.props.match.params.id;\r\n        const bot_number = this.props.match.params.num;\r\n        const profile = this.props.match.params.profile\r\n        console.log(\"here is compoent\", username, bot_number, profile)\r\n        this.setState({username: username, bot_number: bot_number, profile: profile})\r\n        const data = {\r\n            username: username,\r\n            bot_number: bot_number,\r\n            profile: profile\r\n        }\r\n        this.props.displayMsg(data);\r\n    }\r\n\r\n    onChange = (e) => {\r\n        console.log(\"I am changed!!!!!!!!!!\", e.target.value);\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        console.log(\"kkk\", this.state.msg1)\r\n    }\r\n\r\n    sendMsg = () => {\r\n        console.log(\"send msg\", this.state.msg_content)\r\n        const data = {\r\n            username: this.state.username,\r\n            bot_number: this.state.bot_number,\r\n            profile: this.state.profile,\r\n            content: this.state.msg_content,\r\n            link: localStorage.getItem('dm_link'),\r\n        }\r\n        console.log(\"data\", data)\r\n        this.props.newMsg(data)\r\n        this.setState({msg_content: \"\"})\r\n        // .then((res) => {\r\n        //     if (res.code == \"failed\"){\r\n        //         alert(res.message)\r\n        //     }\r\n        //     else {\r\n        //         alert(\"dm sent\")\r\n        //         this.setState({msg_content: \"\"})\r\n        //     }\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        {\r\n            if ( this.props.msg_data == null || this.props.msg_data[0].username != this.state.username) {\r\n                return (\r\n                    <div className=\"lds-grid\">\r\n                        <div></div><div></div><div></div><div></div><div></div><div></div>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        console.log(\"msg data\", this.props.msg_data)\r\n        const msgData = this.props.msg_data\r\n        console.log(\"mmm\", msgData)\r\n        return (\r\n            <div className=\"content-wrapper\">\r\n            <div className=\"card\">\r\n            <div className=\"no-gutters\" style={{paddingTop:\"45px\"}}>\r\n                <div className=\"chat-container\">\r\n                    <ul className=\"chat-box chatContainerScroll\">\r\n                        {msgData && msgData.map((data, index) => (\r\n                            data.coming_time != '' ? (\r\n                                <li className=\"chat-left\" key={index}>\r\n                                    <div className=\"chat-avatar\">  \r\n                                        <AccountCircleIcon fontSize=\"large\"/>                   \r\n                                        <div className=\"chat-name\">{data.username}</div>\r\n                                    </div>\r\n                                    <div class=\"chat-text\">\r\n                                        {data.content}\r\n                                    </div>\r\n                                    <div class=\"chat-hour\">{data.coming_time}</div>\r\n                                </li>) : (\r\n                                <li className=\"chat-right\" key={index}>\r\n                                    {data.new_reply || data.new_reply == false ? (\r\n                                        <div className=\"chat-hour\">\"Sent\"</div>\r\n                                    ) : (<div className=\"chat-hour\">\"Pending\"</div>)}\r\n                                    <div className=\"chat-hour\">{ data.coming_time }</div>\r\n                                    <div className=\"chat-text\">\r\n                                    { data.content }\r\n                                    </div>\r\n                                    <div className=\"chat-avatar\">   \r\n                                        <AccountBoxIcon fontSize=\"large\"/>                            \r\n                                        <div className=\"chat-name\">{ data.username }</div>\r\n                                    </div>\r\n                                </li>\r\n                            )\r\n                        ))}\r\n                    </ul>\r\n\r\n                    <div>\r\n                          <div style={{marginTop:\"-10px\",display:\"flex\"}}>\r\n                                <textarea rows=\"3\" onChange={this.onChange} id=\"msg-content\" name= \"msg_content\" value={this.state.msg_content} placeholder=\"Type your message here...\"></textarea>\r\n                                <Button onClick={this.sendMsg} style={{marginTop:\"auto\",marginBottom: \"auto\", marginLeft:\"20px\", padding: '10px 30px', height: '100%'}}>Send</Button>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    msg_status: state.msgData.code,\r\n    msg_data: state.msgData.message\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    displayMsg,\r\n    newMsg\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Message)",["125","126"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\CommentInbox.js",["127","128","129","130","131","132","133","134","135","136","137","138"],"import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport MaterialTable, { Column, MTableBodyRow, TablePagination } from \"material-table\";\r\n\r\nimport './style.css'\r\n\r\nimport { forwardRef } from 'react';\r\n \r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport View from \"@material-ui/icons/Visibility\";\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport { getAllData, updateIsMarked} from \"./../api/DashboardFunction\";\r\nimport { Height } from \"@material-ui/icons\";\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nclass CommentInbox extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hoveringOver: \"\"\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getAllData();\r\n    }\r\n\r\n    handleRowHover = (event, propsData) => {\r\n        this.setState({hoveringOver: propsData.index});\r\n    }\r\n\r\n    handleRowHoverLeave = (event, propsData) => {\r\n        this.setState({hoveringOver: \"\"});\r\n    }\r\n\r\n    isMarkAsRead = (row) => {\r\n        return row.mark_as_read == false;\r\n    }\r\n\r\n    handleDisplayMessage = (event, data) => {\r\n        console.log(\"I am dat!!\", data);\r\n        // udpate is marked\r\n        const info = {\r\n            account_username: data.account_username,\r\n            to_username: data.to_username,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile,\r\n            coming_time: data.coming_time,\r\n            content: data.content\r\n        }\r\n        updateIsMarked(info).then((res) => {\r\n            if (res.code != \"success\"){\r\n                alert(res.message)\r\n            } \r\n        })\r\n\r\n        localStorage.setItem('previous_content', data.content);\r\n        localStorage.setItem('link', data.link)\r\n        this.props.history.push(`/comment/${data.account_username}/${data.to_username}/${data.bot_number}/${data.profile}`)\r\n    }\r\n\r\n    dateCompare = (firstDate, secondDate) => {\r\n        const date1 = new Date(firstDate);\r\n        const date2 = new Date(secondDate);\r\n\r\n        if (date1 > date2)\r\n            return -1;\r\n\r\n        if (date1 < date2)\r\n            return 1;\r\n\r\n        return 0;\r\n    }\r\n\r\n    render() {\r\n        {\r\n            if ( this.props.success !== true ) {\r\n                return (\r\n                    <div className=\"lds-grid\">\r\n                        <div></div><div></div><div></div><div></div><div></div><div></div>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n        const reply_comment = this.props.reply_comment;\r\n        const { hoveringOver } = this.state;\r\n        let filtered_comment\r\n        if (reply_comment != undefined && this.props.bot_number == 0){\r\n            filtered_comment = reply_comment\r\n        }\r\n        else if (reply_comment != undefined && this.props.bot_number != 0){\r\n            filtered_comment = reply_comment.filter((item) => item.bot_number === this.props.bot_number)\r\n        }\r\n\r\n        if (filtered_comment) {\r\n            filtered_comment.sort((a, b) => this.dateCompare(a.save_time, b.save_time));\r\n            // for (var i = 0 ; i < filtered_comment.length; i ++) {\r\n            //     const save_time = new Date(filtered_comment[i].save_time);\r\n            //     console.log(\"I am tim!!!\", save_time);\r\n            //     filtered_comment[i].save_time = save_time.toLocaleString('default', { month: 'short', day: 'numeric' })\r\n            // }\r\n            for (var i = 0; i < filtered_comment.length; i++) {\r\n                if (filtered_comment[i].content.length >= 20){\r\n                    filtered_comment[i].content = filtered_comment[i].content.slice(0, 20) + \"...\"\r\n                }\r\n                if (filtered_comment[i].to_username == \"@peachlyapp\") {\r\n                    filtered_comment.splice(i, 1)\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div className=\"table\">\r\n                <MaterialTable\r\n                components={{\r\n                    Pagination: props => {\r\n                      return (\r\n                        <td>\r\n                          <table\r\n                            style={{\r\n                              position: 'fixed',\r\n                              bottom: 0,\r\n                              left: 0,\r\n                              width: '100%',\r\n                              height:'100%',\r\n                            }}\r\n                          >\r\n                            <tbody>\r\n                              <tr>\r\n                                <TablePagination {...props} />\r\n                              </tr>\r\n                            </tbody>\r\n                          </table>\r\n                        </td>\r\n                      );\r\n                    },\r\n                  }}\r\n                    icons={tableIcons}\r\n                    columns={[\r\n                        { title: \"Username\", field: \"to_username\", width: \"20%\" },\r\n                        { title: \"Account Username\", field: \"account_username\", width: \"20%\" },\r\n                        { title: \"Coming Time\", field: \"coming_time\"},\r\n                        { title: \"Message Content\", field: \"content\"},\r\n                        // { title: \"Save Time\", field: \"save_time\"},\r\n                        // { title: \"Link\", field: \"link\"},\r\n                        { title: \"Bot Number\", field: \"bot_number\"},\r\n                        { title: \"Browser Number\", field: \"profile\" },\r\n                    ]}\r\n                    data={filtered_comment}\r\n                    options={{\r\n                        // paging: false,\r\n                        // toolbar: false,\r\n                        pageSizeOptions: [25, 50],\r\n                        pageSize: 25,\r\n                        headerStyle: {\r\n                          backgroundColor: \"#378FC3\",\r\n                          color: \"#FFF\",\r\n                          fontSize: \"17px\",\r\n                          fontWeight: \"bold\"\r\n                        },\r\n                        rowStyle: rowData => ({\r\n                            backgroundColor: this.isMarkAsRead(rowData) ? \"rgba(255,255,255,0.902)\" : \"rgba(242,245,245,0.8)\",\r\n                            fontWeight: this.isMarkAsRead(rowData) ? \"bold\" : \"\",\r\n                            boxShadow: rowData.tableData.id === hoveringOver ? '0px 2px 18px 0px rgba(0,0,0,0.5)' : '',\r\n                        }),\r\n                        tableLayout: \"fixed\"\r\n                    }}\r\n                    title=\"\"\r\n                    components={{\r\n                        Row: props => {\r\n                            return (\r\n                            <MTableBodyRow\r\n                                {...props}\r\n                                onMouseEnter={e => this.handleRowHover(e, props)}\r\n                                onMouseLeave={e => this.handleRowHoverLeave(e, props)}\r\n                            />\r\n                            );\r\n                        },\r\n                    }}\r\n                    onRowClick = {this.handleDisplayMessage}\r\n                    // actions={[\r\n                    //     {\r\n                    //     icon: View,\r\n                    //     tooltip: \"View\",\r\n                    //     onClick: (event, rowData) =>\r\n                    //         {this.handleDisplayComment(rowData)}\r\n                    //     }\r\n                    // ]}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    success: state.success,\r\n    reply_comment: state.data.reply_comment,\r\n    bot_number: state.bot\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    getAllData,\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CommentInbox)",["139","140"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Login.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\DashboardFunction.js",["141","142","143","144","145"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\history.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\UserFunction.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Navbar.js",["146","147","148","149","150","151","152","153","154","155"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n// import jwt_decode from \"jwt-decode\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport AssessmentIcon from '@material-ui/icons/Assessment';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport StorageIcon from '@material-ui/icons/Storage';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { Button, DropdownButton,Dropdown } from 'react-bootstrap';\r\n\r\nimport { checkDM, checkComment, checkFollow, clearNotification, setBot} from \"./../api/DashboardFunction\";\r\n\r\nimport { useHistory } from \"react-router\";\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  menu: {\r\n    color: '#fff',\r\n    marginRight: '15px',\r\n    '&:hover': {\r\n      color: '#42f59b'\r\n    }\r\n  },\r\n  faq: {\r\n    color: '#fff',\r\n    marginRight: '20px',\r\n    marginTop: '4px',\r\n    '&:hover': {\r\n      color: '#42f59b'\r\n    }\r\n  }\r\n}));\r\n\r\nconst Navbar = ({handleDrawerOpen, hasHamburger, open, hanldeModalState, dmNotification, commentNotification, clearNotification, setBot}) => {\r\n    const classes = useStyles();\r\n    const token = localStorage.token;\r\n    const history = useHistory();\r\n    const [title, setTitle] = useState(\"Bot List\");\r\n\r\n    function logout () {\r\n      console.log(\"logout\")\r\n      //call api to update login status\r\n      const token = localStorage.token;\r\n      localStorage.clear();\r\n      window.location.href = \"/login\";\r\n    }\r\n\r\n    function commentReply() {\r\n        console.log(\"comment reply\")\r\n        clearNotification(\"comment\")\r\n        history.push({pathname: '/comment-inbox'});\r\n    }\r\n\r\n    function dmReply() {\r\n        clearNotification(\"dm\")\r\n        history.push({pathname: '/dm-inbox'});\r\n    }\r\n\r\n    function goToReport() {\r\n      history.push({pathname: '/report'})\r\n    }\r\n\r\n    function goToLead() {\r\n      history.push({pathname: '/lead'})\r\n    }\r\n\r\n    function GoToHome() {\r\n        history.push({pathname: '/dashboard'})\r\n    }\r\n\r\n    function GoToTwitterAccount() {\r\n      history.push({pathname: '/twitter_account'})\r\n    }\r\n\r\n    function handleBot(botIndex) {\r\n      console.log(\"bot selected:\", botIndex)\r\n      if (botIndex == 0){\r\n        setTitle(`All Bots`)\r\n      }\r\n      else {\r\n        setTitle(`Bot ${botIndex}`)\r\n      }\r\n      //here update the redux state\r\n      setBot(botIndex)\r\n    }\r\n\r\n    const botDropDown = [];\r\n    for (let i = 0; i < 7; i++) {\r\n      if (i == 0){\r\n        botDropDown.push(<Dropdown.Item as=\"button\" onClick={ () => handleBot(i) }>All Bots</Dropdown.Item>)\r\n      }\r\n      else{\r\n        botDropDown.push(<Dropdown.Item as=\"button\" onClick={ () => handleBot(i) }>Bot{i}</Dropdown.Item>)\r\n      }\r\n      \r\n    }\r\n\r\n    return (\r\n        <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)} style={{backgroundColor: \"#42389d\"}}>\r\n            <Toolbar className={classes.toolbar}>\r\n            {localStorage.token ? \r\n              <div style={{width:\"100%\"}}>\r\n                <DropdownButton className={`${classes.menu} float-left`} id=\"bot_list\" title={title}>\r\n                  <Dropdown.ItemText>Select The Bot!</Dropdown.ItemText>\r\n                  {botDropDown}\r\n                </DropdownButton>\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ GoToHome }>\r\n                  <Tooltip title=\"Home\">\r\n                    <HomeIcon fontSize=\"large\"/>\r\n                  </Tooltip>\r\n                </Typography>\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ commentReply }>\r\n                {\r\n                    commentNotification && \r\n                    <Badge color=\"error\" badgeContent=\" \" variant=\"dot\">\r\n                        <Tooltip title=\"Comment\">\r\n                          <CommentIcon fontSize=\"large\"/>\r\n                        </Tooltip>\r\n                    </Badge>\r\n                }\r\n                {\r\n                    !commentNotification && <Tooltip title=\"Comment\"><CommentIcon fontSize=\"large\"/></Tooltip>\r\n                }\r\n                \r\n                </Typography>\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ dmReply }>\r\n                {\r\n                    dmNotification && \r\n                    <Badge color=\"error\" badgeContent=\" \" variant=\"dot\">\r\n                      <Tooltip title=\"DM\">\r\n                         <MessageIcon fontSize=\"large\"/>\r\n                      </Tooltip>\r\n                    </Badge>\r\n                }\r\n                {\r\n                    !dmNotification && <Tooltip title=\"DM\"><MessageIcon fontSize=\"large\"/></Tooltip>\r\n                }\r\n                </Typography>\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ goToReport }>\r\n                  <Tooltip title=\"Report\">\r\n                    <AssessmentIcon fontSize=\"large\"/>\r\n                    </Tooltip>\r\n                </Typography>\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ GoToTwitterAccount }>\r\n                  <Tooltip title=\"Twitter Account\">\r\n                    <AccountBoxIcon fontSize=\"large\"/>\r\n                  </Tooltip>\r\n                </Typography>\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ goToLead }>\r\n                  <Tooltip title=\"Leads\">\r\n                    <StorageIcon fontSize=\"large\"/>\r\n                  </Tooltip>\r\n                </Typography>\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-right`} color=\"inherit\" onClick={ logout }>\r\n                  <Tooltip title=\"Logout\">\r\n                    <ExitToAppIcon fontSize=\"large\"/>\r\n                    </Tooltip>\r\n                </Typography>\r\n              </div> :\r\n              <div style={{width:\"100%\"}}>\r\n                {/* <Link to=\"join\"><Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-right`} color=\"inherit\" >\r\n                  Signup\r\n                </Typography></Link> */}\r\n                <Link to=\"login\"><Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-right`} color=\"inherit\">\r\n                  Login\r\n                </Typography></Link>\r\n              </div>\r\n          }\r\n           </Toolbar>\r\n      </AppBar>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    dmNotification: state.dmNotification,\r\n    commentNotification: state.commentNotification\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    clearNotification,\r\n    setBot\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Navbar)","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Lead.js",["156","157","158","159","160","161"],"import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { Button } from 'react-bootstrap';\r\nimport MaterialTable, { Column, MTableBodyRow, TablePagination } from \"material-table\";\r\n\r\nimport './style.css'\r\n\r\nimport { forwardRef } from 'react';\r\n \r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport View from \"@material-ui/icons/Visibility\";\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport { getAllData, updateIsMarked} from \"./../api/DashboardFunction\";\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n  };\r\n\r\nclass Lead extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hoveringOver: \"\"\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getAllData();\r\n    }\r\n\r\n    render() {\r\n        const used_lead = this.props.used_lead;\r\n        // this.exportToCSV();\r\n\r\n        return(\r\n            <div className=\"table\">\r\n                <MaterialTable\r\n                components={{\r\n                    Pagination: props => {\r\n                      return (\r\n                        <td>\r\n                          <table\r\n                            style={{\r\n                              position: 'fixed',\r\n                              bottom: 0,\r\n                              left: 0,\r\n                              width: '100%',\r\n                            }}\r\n                          >\r\n                            <tbody>\r\n                              <tr>\r\n                                <TablePagination {...props} />\r\n                              </tr>\r\n                            </tbody>\r\n                          </table>\r\n                        </td>\r\n                      );\r\n                    },\r\n                  }}\r\n                    icons={tableIcons}\r\n                    columns={[\r\n                        { title: \"Username\", field: \"username\", width: \"20%\" },\r\n                        { title: \"Bot Number\", field: \"bot_number\", width: \"20%\" },\r\n                        { title: \"DM\", field: \"dm\"},\r\n                        { title: \"DM Expired\", field: \"dm_expired\"},\r\n                        { title: \"Comment\", field: \"comment\"},\r\n                        { title: \"Comment Expired\", field: \"comment_expired\"},\r\n                        { title: \"Follow\", field: \"follow\"},\r\n                    ]}\r\n                    data={used_lead}\r\n                    options={{\r\n                        pageSizeOptions: [10, 25, 50],\r\n                        pageSize: 10,\r\n                        headerStyle: {\r\n                          backgroundColor: \"#378FC3\",\r\n                          color: \"#FFF\",\r\n                          fontSize: \"17px\",\r\n                          fontWeight: \"bold\"\r\n                        },\r\n                        tableLayout: \"fixed\"\r\n                    }}\r\n                    components={{\r\n                    }}\r\n                    title=\"Lead\"\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    used_lead: state.data.used_lead,\r\n    bot_number: state.bot\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    getAllData,\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Lead)","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Dashboard.js",["162","163","164","165","166","167","168","169"],"import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { Button, DropdownButton,Dropdown } from 'react-bootstrap';\r\n\r\nimport './style.css'\r\n\r\nimport { startBot, endBot, getAllData, checkDM, checkComment, checkNotification, checkFollow } from \"./../api/DashboardFunction\";\r\n\r\nclass Dashboard extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data: {},\r\n            bot1_msg1: 'https://www.protectedtext.com/v2_msg1',\r\n            bot1_msg2: 'https://www.protectedtext.com/v2_msg2',\r\n            bot1_comment_msg: 'https://www.protectedtext.com/v_comment',\r\n            username_num: 200,\r\n            lead_type: \"peachly\",\r\n            bot1_successful_dm: 0,\r\n            bot1_unsuccessful_dm: 0,\r\n            bot1_spintax1_reply: 0,\r\n            bot2_successful_dm: 0,\r\n            bot2_unsuccessful_dm: 0,\r\n            bot2_spintax1_reply: 0,\r\n        };\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        console.log(\"real\",localStorage.token)\r\n        if (localStorage.token == undefined) {\r\n            window.location.href = \"/login\"\r\n        }\r\n        if( this.props.success === false ) {\r\n            this.props.getAllData();\r\n        }\r\n        console.log(this.props.data)\r\n        // try {\r\n        //     setInterval(async () => {\r\n        //       this.props.checkNotification();\r\n        //     }, 10000);\r\n        //   } catch(e) {\r\n        //     console.log(e);\r\n        //   }\r\n    }\r\n\r\n    handleDisplayMessage = (data) => {\r\n        console.log(\"HERE\", data)\r\n        this.props.history.push(`/message/${data.username}/${data.bot_number}/${data.profile}`)\r\n        // window.location.href = \"/message/\"+data.username\r\n    }\r\n\r\n    handleDisplayComment = (data) => {\r\n        console.log(\"comment\", data)\r\n        localStorage.setItem('previous_content', data.content);\r\n        localStorage.setItem('link', data.link)\r\n        this.props.history.push(`/comment/${data.account_username}/${data.to_username}/${data.bot_number}/${data.profile}`)\r\n    }\r\n\r\n    handleStartAutomation = () => {\r\n        console.log(\"bot_num\", this.props.bot_number)\r\n        const bot_info = {\r\n            bot_msg1: this.state.bot1_msg1,\r\n            bot_msg2: this.state.bot1_msg2,\r\n            bot_comment_msg: this.state.bot1_comment_msg,\r\n            username_num: this.state.username_num,\r\n            bot_number: this.props.bot_number,\r\n            lead_type: this.state.lead_type,\r\n            status: \"start\",\r\n        }\r\n        startBot(bot_info).then((res) => {\r\n            if (res.code == \"failed\"){\r\n                alert(res.message)\r\n            }\r\n        })\r\n    }\r\n\r\n    handleEndAutomation = () => {\r\n        console.log(\"End Auto\")\r\n        const info = {\r\n            status: \"end\",\r\n            bot_number: this.props.bot_number\r\n        }\r\n        endBot(info).then((res) => {\r\n            if (res.code == \"failed\"){\r\n                alert(res.message)\r\n            } \r\n        })\r\n    }\r\n\r\n    handleCheckDM = () => {\r\n        console.log(\"check dm clicked\")\r\n        checkDM(this.props.bot_number).then((res) => {\r\n            if (res.code == \"failed\"){\r\n                alert(res.message)\r\n            } \r\n        })\r\n    }\r\n\r\n    handleCheckFollow = () => {\r\n        console.log(\"check follow clicked\")\r\n        checkFollow(this.props.bot_number).then((res) => {\r\n            if (res.code == \"failed\"){\r\n                alert(res.message)\r\n            } \r\n        })\r\n    }\r\n\r\n    handleCheckComment = () => {\r\n        checkComment(this.props.bot_number).then((res) => {\r\n            if (res.code == \"failed\") {\r\n                alert(res.message)\r\n            }\r\n        })\r\n    }\r\n\r\n    handleLeadSelection = (data) => {\r\n        console.log(\"125\", data)\r\n        this.setState({lead_type: data})\r\n    }\r\n\r\n    onChange = (e) => {\r\n        console.log(\"I am changed!!!!!!!!!!\", e.target.value);\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        console.log(\"kkk\", this.state.msg1)\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            { title: \"Date\", field: \"date\" },\r\n            { title: \"Amount\", field: \"amount\" },\r\n            { title: \"Description\", field: \"description\" },\r\n            { title: \"Status\", field: \"status\" },\r\n            { title: \"Main Balance\", field: \"main_balance\" },\r\n        ];\r\n\r\n        const leadDropDown = [];\r\n        const lead = [\"peachly\", \"linda\"]\r\n        for (let i = 0; i < lead.length; i++) {\r\n            leadDropDown.push(<Dropdown.Item as=\"button\" onClick={ () => this.handleLeadSelection(lead[i]) }>{lead[i]}</Dropdown.Item>)\r\n        }\r\n\r\n        if( this.props.success === true ) {\r\n            return (\r\n                <div className=\"container\" style={{paddingTop:\"65px\", paddingLeft:\"20px\", paddingRight: \"20px\", color: \"black\"}}>\r\n                    <div className=\"control-div\">\r\n                        <Button variant=\"primary\" onClick = {this.handleStartAutomation}>Start Automation</Button>\r\n                        <Button variant=\"primary\" onClick = {this.handleEndAutomation}>End Automation</Button>\r\n                        {/* <Button variant=\"primary\" disabled onClick = {this.handleCheckDM} >Check Coming DM</Button>\r\n                        <Button variant=\"primary\" disabled onClick = {this.handleCheckComment} >Check Comment Reply</Button>\r\n                        <Button variant=\"primary\" disabled onClick = {this.handleCheckFollow} >Check Follow Back</Button> */}\r\n                    </div>\r\n                    <div style={{marginTop:\"20px\"}}>\r\n                        <b><p>Number of the Leads: </p></b>\r\n                        <input\r\n                            type=\"number\"\r\n                            // max=\"500\"\r\n                            className=\"form-control\"\r\n                            id=\"username_num\"\r\n                            name=\"username_num\"\r\n                            value={this.state.username_num}\r\n                            onChange={this.onChange}\r\n                            style = {{width: \"30%\"}}\r\n                        />\r\n                    </div>\r\n                    {/* <div style={{marginTop:\"20px\"}}>\r\n                        <b><p>Leads Switching</p></b>\r\n                        <DropdownButton id=\"lead_selection\" title=\"Leads\">\r\n                            {leadDropDown}\r\n                        </DropdownButton>\r\n                    </div> */}\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-4 col-sm-4 spintaxTextArea\">\r\n                            <b><p>First Spintax:</p></b>\r\n                            <textarea onChange={this.onChange} style={{width:\"99%\"}} id=\"bot1_msg1\" name=\"bot1_msg1\" rows=\"2\" cols=\"50\" value={this.state.bot1_msg1} />\r\n                        </div>\r\n                        <div className=\"col-md-4 col-sm-4 spintaxTextArea\">\r\n                            <b><p>Second Spintax:</p></b>\r\n                            <textarea onChange={this.onChange} style={{width:\"99%\"}} id=\"bot1_msg2\" name=\"bot1_msg2\" rows=\"2\" cols=\"50\" value={this.state.bot1_msg2} />\r\n                        </div>\r\n                        <div className=\"col-md-4 col-sm-4 spintaxTextArea\">\r\n                            <b><p>Comment Spintax:</p></b>\r\n                            <textarea onChange={this.onChange} style={{width:\"99%\"}} id=\"bot1_comment_msg\" name=\"bot1_comment_msg\" rows=\"2\" cols=\"50\" value={this.state.bot1_comment_msg} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div >Coming Soon</div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    error: state.error,\r\n    pending: state.pending,\r\n    success: state.success,\r\n    data: state.data,\r\n    report: state.data.report,\r\n    new_message: state.data.new_message,\r\n    reply_comment: state.data.reply_comment,\r\n    bot_number: state.bot\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    getAllData,checkNotification\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Dashboard)","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\store.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\Socket.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\DmInbox.js",["170","171","172","173","174","175","176","177","178","179","180","181","182"],"import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { Button } from 'react-bootstrap';\r\nimport MaterialTable, { Column, MTableBodyRow } from \"material-table\";\r\n\r\nimport './style.css'\r\n\r\nimport { forwardRef } from 'react';\r\n \r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport View from \"@material-ui/icons/Visibility\";\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport { startBot, endBot, getAllData, updateIsMarkedDm } from \"./../api/DashboardFunction\";\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n  };\r\n\r\nclass DmInbox extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hoveringOver: \"\"\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getAllData();\r\n    }\r\n\r\n    handleRowHover = (event, propsData) => {\r\n        this.setState({hoveringOver: propsData.index});\r\n    }\r\n\r\n    handleRowHoverLeave = (event, propsData) => {\r\n        this.setState({hoveringOver: \"\"});\r\n    }\r\n\r\n    isMarkAsRead = (row) => {\r\n        return row.mark_as_read == false;\r\n    }\r\n\r\n    handleDisplayMessage = (event, data) => {\r\n        console.log(\"I am dat!!\", data);\r\n        // udpate is marked\r\n        const info = {\r\n            account_username: data.account_username,\r\n            username: data.username,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile,\r\n            coming_time: data.coming_time,\r\n            content: data.content\r\n        }\r\n        updateIsMarkedDm(info).then((res) => {\r\n            if (res.code == \"failed\"){\r\n                alert(res.message)\r\n            } \r\n        })\r\n        \r\n        //save the link into localstorage\r\n        localStorage.setItem('dm_link', data.link)\r\n        this.props.history.push(`/message/${data.username}/${data.bot_number}/${data.profile}`)\r\n    }\r\n\r\n    dateCompare = (firstDate, secondDate) => {\r\n        const date1 = new Date(firstDate);\r\n        const date2 = new Date(secondDate);\r\n\r\n        if (date1 > date2)\r\n            return -1;\r\n\r\n        if (date1 < date2)\r\n            return 1;\r\n\r\n        return 0;\r\n    }\r\n\r\n    render() {\r\n        {\r\n            if ( this.props.success !== true ) {\r\n                return (\r\n                    <div className=\"lds-grid\">\r\n                        <div></div><div></div><div></div><div></div><div></div><div></div>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n        const new_message = this.props.new_message;\r\n        const { hoveringOver } = this.state;\r\n        let filtered_message \r\n        if (new_message != undefined && this.props.bot_number == 0){\r\n            filtered_message = new_message\r\n        }\r\n        else if (new_message != undefined && this.props.bot_number != 0){\r\n            filtered_message= new_message.filter((item) => item.bot_number === this.props.bot_number)\r\n        }\r\n        \r\n        if (filtered_message) {\r\n            filtered_message.sort((a,b) => this.dateCompare(a.save_time, b.save_time))\r\n\r\n            // for (var i = 0 ; i < filtered_message.length; i ++) {\r\n            //     const save_time = new Date(filtered_message[i].save_time);\r\n            //     console.log(\"I am tim!!!\", save_time);\r\n            //     filtered_message[i].save_time = save_time.toLocaleString('default', { month: 'short', day: 'numeric' })\r\n            // }\r\n            //show only last message from the same user\r\n            for (var i = 0 ; i < filtered_message.length -1; i ++) {\r\n                if (filtered_message[i].content.length >= 20){\r\n                    filtered_message[i].content = filtered_message[i].content.slice(0, 20) + \"...\"\r\n                }\r\n                if (filtered_message[i].username == filtered_message[i+1].username) {\r\n                    filtered_message.splice(i, 1)\r\n                    i = i-1\r\n                }\r\n            }\r\n        }\r\n        \r\n\r\n        return(\r\n            <div className=\"table\">\r\n                <MaterialTable\r\n                    icons={tableIcons}\r\n                    columns={[\r\n                        { title: \"Username\", field: \"username\" },\r\n                        { title: \"Coming Message Time\", field: \"coming_time\"},\r\n                        { title: \"Message Content\", field: \"content\"},\r\n                        // { title: \"Save Time\", field: \"save_time\"},\r\n                        { title: \"Bot Number\", field: \"bot_number\"},\r\n                        { title: \"Browser Number\", field: \"profile\" },\r\n                    ]}\r\n                    data={filtered_message}\r\n                    options={{\r\n                        // paging: false,\r\n                        // toolbar: false,\r\n                        pageSizeOptions: [25, 50],\r\n                        pageSize: 25,\r\n                        headerStyle: {\r\n                          backgroundColor: \"#378FC3\",\r\n                          color: \"#FFF\",\r\n                          fontSize: \"17px\",\r\n                          fontWeight: \"bold\"\r\n                        },\r\n                        rowStyle: rowData => ({\r\n                            backgroundColor: this.isMarkAsRead(rowData) ? \"rgba(255,255,255,0.902)\" : \"rgba(242,245,245,0.8)\",\r\n                            fontWeight: this.isMarkAsRead(rowData) ? \"bold\" : \"\",\r\n                            boxShadow: rowData.tableData.id === hoveringOver ? '0px 2px 18px 0px rgba(0,0,0,0.5)' : ''\r\n                        }),\r\n                        tableLayout: \"fixed\"\r\n                    }}\r\n                    title=\"\"\r\n                    components={{\r\n                        Row: props => {\r\n                            return (\r\n                            <MTableBodyRow\r\n                                {...props}\r\n                                onMouseEnter={e => this.handleRowHover(e, props)}\r\n                                onMouseLeave={e => this.handleRowHoverLeave(e, props)}\r\n                            />\r\n                            );\r\n                        }\r\n                    }}\r\n                    onRowClick = {this.handleDisplayMessage}\r\n                    // actions={[\r\n                    //     {\r\n                    //     icon: View,\r\n                    //     tooltip: \"View\",\r\n                    //     onClick: (event, rowData) =>\r\n                    //         {this.handleDisplayComment(rowData)}\r\n                    //     }\r\n                    // ]}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    success: state.success,\r\n    new_message: state.data.new_message,\r\n    bot_number: state.bot\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    getAllData,\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DmInbox)","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\actions\\actions.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Report.js",["183","184","185","186","187","188"],"import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { Button } from 'react-bootstrap';\r\nimport MaterialTable, { Column, MTableBodyRow, TablePagination } from \"material-table\";\r\n\r\nimport './style.css'\r\n\r\nimport { forwardRef } from 'react';\r\n \r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport View from \"@material-ui/icons/Visibility\";\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport { getAllData, updateIsMarked} from \"./../api/DashboardFunction\";\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n  };\r\n\r\nclass CommentInbox extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hoveringOver: \"\"\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getAllData();\r\n    }\r\n\r\n    downloadCSV(csv, filename) {\r\n        let csvFile;\r\n        let downloadLink;\r\n    \r\n        // CSV file\r\n        csvFile = new Blob([csv], {type: \"text/csv\"});\r\n    \r\n        // Download link\r\n        downloadLink = document.createElement(\"a\");\r\n    \r\n        // File name\r\n        downloadLink.download = filename;\r\n    \r\n        // Create a link to the file\r\n        downloadLink.href = window.URL.createObjectURL(csvFile);\r\n    \r\n        // Hide download link\r\n        downloadLink.style.display = \"none\";\r\n    \r\n        // Add the link to DOM\r\n        document.body.appendChild(downloadLink);\r\n    \r\n        // Click download link\r\n        downloadLink.click();\r\n    }\r\n\r\n    exportToCSV() {\r\n        let csv = [];\r\n        let titles = [\r\n            \"Bot Number\",\r\n            \"Number of Leads\",\r\n            \"Sent DM\",\r\n            \"Expired DM\",\r\n            \"Spintax1 Reply\",\r\n            \"Spintax2 Reply\",\r\n            \"Sent Comment\",\r\n            \"Expired Comment\",\r\n            \"Comment Reply\",\r\n            \"Follow\",\r\n            \"Follow Back\"\r\n        ];\r\n        csv.push(titles.join(\",\"));\r\n        for( let i = 0; i < this.props.report.length; i ++ ) {\r\n            let data = this.props.report[i];\r\n            let row = [data.bot_number, data.lead_number, data.sent_dm, data.expired_dm,data.spintax1_reply, data.spintax2_reply,data.comment, data.expired_comment,data.comment_reply, data.follow, data.follow_back];\r\n            csv.push(row.join(','));\r\n        }\r\n        this.downloadCSV(csv.join(\"\\n\"), \"report.csv\");\r\n    }\r\n\r\n    render() {\r\n        const report = this.props.report;\r\n        // this.exportToCSV();\r\n\r\n        return(\r\n            <div className=\"table\">\r\n                <MaterialTable\r\n                components={{\r\n                    Pagination: props => {\r\n                      return (\r\n                        <td>\r\n                          <table\r\n                            style={{\r\n                              position: 'fixed',\r\n                              bottom: 0,\r\n                              left: 0,\r\n                              width: '100%',\r\n                            }}\r\n                          >\r\n                            <tbody>\r\n                              <tr>\r\n                                <TablePagination {...props} />\r\n                              </tr>\r\n                            </tbody>\r\n                          </table>\r\n                        </td>\r\n                      );\r\n                    },\r\n                  }}\r\n                    icons={tableIcons}\r\n                    columns={[\r\n                        { title: \"Bot Number\", field: \"bot_number\", width: \"20%\" },\r\n                        { title: \"Number of Leads\", field: \"lead_number\", width: \"20%\" },\r\n                        { title: \"Sent DM\", field: \"sent_dm\"},\r\n                        { title: \"Expired DM\", field: \"expired_dm\"},\r\n                        { title: \"Spintax1 Reply\", field: \"spintax1_reply\"},\r\n                        // { title: \"Spintax2 Reply\", field: \"spintax2_reply\"},\r\n                        { title: \"Sent Comment\", field: \"sent_comment\"},\r\n                        { title: \"Expired Comment\", field: \"expired_comment\"},\r\n                        { title: \"Comment Reply\", field: \"comment_reply\" },\r\n                        { title: \"Follow\", field: \"follow\"},\r\n                        { title: \"Follow Back\", field: \"follow_back\"}\r\n                    ]}\r\n                    data={report}\r\n                    options={{\r\n                        pageSizeOptions: [10, 25, 50],\r\n                        pageSize: 10,\r\n                        headerStyle: {\r\n                          backgroundColor: \"#378FC3\",\r\n                          color: \"#FFF\",\r\n                          fontSize: \"17px\",\r\n                          fontWeight: \"bold\"\r\n                        },\r\n                        tableLayout: \"fixed\"\r\n                    }}\r\n                    actions={[\r\n                        {\r\n                          icon: tableIcons.Export,\r\n                          tooltip: \"Export To CSV\",\r\n                          isFreeAction: true,\r\n                          onClick: () => {\r\n                            this.exportToCSV();\r\n                          }\r\n                        }\r\n                      ]}\r\n                    components={{\r\n                    }}\r\n                    title=\"Report\"\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    report: state.data.report,\r\n    bot_number: state.bot\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    getAllData,\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CommentInbox)","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\reportWebVitals.js",[],["189","190"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Landing.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Join.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\api.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\TwitterAccount.js",["191","192","193","194","195","196"],"import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { Button } from 'react-bootstrap';\r\nimport MaterialTable, { Column, MTableBodyRow, TablePagination } from \"material-table\";\r\n\r\nimport './style.css'\r\n\r\nimport { forwardRef } from 'react';\r\n \r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport View from \"@material-ui/icons/Visibility\";\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport { getAllData, updateIsMarked} from \"./../api/DashboardFunction\";\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n  };\r\n\r\nclass TwitterAccount extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hoveringOver: \"\"\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getAllData();\r\n    }\r\n\r\n    handleDisplayAccountInfo = (event, data) => {\r\n        this.props.history.push(`/account/${data.username}/${data.bot_number}`)\r\n    }\r\n\r\n    render() {\r\n        const accountData = this.props.account_data;\r\n        // this.exportToCSV();\r\n\r\n        return(\r\n            <div className=\"account_table\">\r\n                <MaterialTable\r\n                components={{\r\n                    Pagination: props => {\r\n                      return (\r\n                        <td>\r\n                          <table\r\n                            style={{\r\n                              position: 'fixed',\r\n                              bottom: 0,\r\n                              left: 0,\r\n                              width: '100%',\r\n                            }}\r\n                          >\r\n                            <tbody>\r\n                              <tr>\r\n                                <TablePagination {...props} />\r\n                              </tr>\r\n                            </tbody>\r\n                          </table>\r\n                        </td>\r\n                      );\r\n                    },\r\n                  }}\r\n                    icons={tableIcons}\r\n                    columns={[\r\n                        { title: \"Username\", field: \"username\", width: \"20%\" },\r\n                        { title: \"Bot Number\", field: \"bot_number\", width: \"20%\" },\r\n                        { title: \"Status\", field: \"status\" },\r\n                        { title: \"Leads\", field: \"number_of_tried_leads\"},\r\n                        { title: \"DM\", field: \"dm\"},\r\n                        { title: \"DM Reply\", field: \"dm_reply\"},\r\n                        { title: \"DM Expired\", field: \"dm_expired\" },\r\n                        { title: \"Comment\", field: \"comment\"},\r\n                        { title: \"Comment Reply\", field: \"comment_reply\"},\r\n                        { title: \"Follow\", field: \"follow\"},\r\n                        { title: \"Follow Back\", field: \"follow_back\"},\r\n                    ]}\r\n                    data={accountData}\r\n                    options={{\r\n                        pageSizeOptions: [10, 25, 50],\r\n                        pageSize: 10,\r\n                        headerStyle: {\r\n                          backgroundColor: \"#378FC3\",\r\n                          color: \"#FFF\",\r\n                          fontSize: \"17px\",\r\n                          fontWeight: \"bold\",\r\n                        },\r\n                        tableLayout: \"fixed\"\r\n                    }}\r\n                    components={{\r\n                    }}\r\n                    title=\"Lead\"\r\n                    onRowClick = {this.handleDisplayAccountInfo}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    account_data: state.data.account,\r\n    bot_number: state.bot\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    getAllData,\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TwitterAccount)","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Comment.js",["197","198","199","200","201","202"],"import { keys } from \"@material-ui/core/styles/createBreakpoints\";\r\nimport React, { Component } from \"react\";\r\nimport { Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport dataReducer from \"../store/reducers\";\r\nimport { displayComment, newComment } from \"./../api/DashboardFunction\";\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\n\r\nclass Comment extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            content: \"\",\r\n            username: \"\",\r\n            account_name: \"\",\r\n            bot_number: \"\",\r\n            profile: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const account_name = this.props.match.params.account\r\n        const username = this.props.match.params.username;\r\n        const bot_number = this.props.match.params.num;\r\n        const profile = this.props.match.params.profile;\r\n        console.log(\"here is compoent\", username, bot_number, profile)\r\n        this.setState({username: username, bot_number: bot_number, profile: profile, account_name: account_name})\r\n        const data = {\r\n            username: username,\r\n            account_name: account_name,\r\n            bot_number: bot_number,\r\n            profile: profile\r\n        }\r\n        this.props.displayComment(data);\r\n    }\r\n\r\n    onChange = (e) => {\r\n        console.log(\"I am changed!!!!!!!!!!\", e.target.value);\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        console.log(\"kkk\", this.state.msg1)\r\n    }\r\n\r\n    sendMsg = () => {\r\n        console.log(\"send msg\", this.state.msg_content)\r\n        const data = {\r\n            username: this.state.username,\r\n            account_name: this.state.account_name,\r\n            bot_number: this.state.bot_number,\r\n            profile: this.state.profile,\r\n            content: this.state.msg_content,\r\n            previous_content: localStorage.getItem('previous_content'),\r\n            link: localStorage.getItem('link'),\r\n        }\r\n        console.log(\"data\", data)\r\n        this.props.newComment(data)\r\n        this.setState({msg_content: \"\"})\r\n        // newComment(data).then((res) => {\r\n        //     if (res.code == \"failed\"){\r\n        //         alert(res.message)\r\n        //     }\r\n        //     else {\r\n        //         alert(\"Comment sent\")\r\n        //         this.setState({msg_content: \"\"})\r\n        //     }\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        {\r\n            if ( this.props.comment_data == null || this.props.comment_data.message[0].account_username != this.state.account_name) {\r\n                return (\r\n                    <div className=\"lds-grid\">\r\n                        <div></div><div></div><div></div><div></div><div></div><div></div>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n        console.log(\"msg data\", this.props.comment_data)\r\n        const commentData = this.props.comment_data\r\n        console.log(\"mmm\", commentData)\r\n        return (\r\n            <div className=\"content-wrapper\">\r\n            <div className=\"card\">\r\n            <div className=\"no-gutters\">\r\n                <div className=\"chat-container\">\r\n                    <ul className=\"chat-box chatContainerScroll\">\r\n                        {commentData && commentData.message.map((data, index) => (\r\n                            data.coming_time != '' ? (\r\n                                <li className=\"chat-left\" key={index}>\r\n                                    <div className=\"chat-avatar\">  \r\n                                        <AccountCircleIcon fontSize=\"large\"/>                       \r\n                                        <div className=\"chat-name\">{data.to_username}</div>\r\n                                    </div>\r\n                                    <div className=\"chat-avatar\">                     \r\n                                        <div className=\"chat-name\">{data.account_username}</div>\r\n                                    </div>\r\n                                    <div class=\"chat-text\">\r\n                                        {data.content}\r\n                                    </div>\r\n                                    <div class=\"chat-hour\">{data.coming_time}</div>\r\n                                </li>) : (\r\n                                <li className=\"chat-right\" key={index}>\r\n                                    {data.new_reply || data.new_reply == false ? (\r\n                                        <div className=\"chat-hour\">\"Sent\"</div>\r\n                                    ) : (<div className=\"chat-hour\">\"Pending\"</div>)}\r\n                                    <div className=\"chat-hour\">{ data.coming_time }</div>\r\n                                    <div className=\"chat-text\">\r\n                                    { data.content }\r\n                                    </div>\r\n                                    <div className=\"chat-avatar\">                         \r\n                                        <div className=\"chat-name\">{ data.to_username}</div>\r\n                                    </div>\r\n                                    <div className=\"chat-avatar\">   \r\n                                        <AccountBoxIcon fontSize=\"large\"/>                    \r\n                                        <div className=\"chat-name\">{data.account_username}</div>\r\n                                    </div>\r\n                                </li>\r\n                            )\r\n                        ))}\r\n                    </ul>\r\n\r\n                    <div>\r\n                          <div style={{display:\"flex\",marginTop:\"-10px\"}}>\r\n                                <textarea rows=\"3\" onChange={this.onChange} id=\"msg-content\" name= \"msg_content\" value={this.state.msg_content} placeholder=\"Type your message here...\"></textarea>\r\n                                <Button onClick={this.sendMsg} style={{marginTop:\"auto\",marginBottom: \"auto\", marginLeft:\"20px\", padding: '10px 30px', height: '100%'}}>Send</Button>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    // comment_status: state.commentData.code,\r\n    // comment_data: state.commentData.message\r\n    comment_data: state.commentData\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    displayComment,\r\n    newComment\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Comment)","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\TwitterAccountInfo.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\reducers\\index.js",[],{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":16,"nodeType":"209","messageId":"210","endLine":1,"endColumn":25},{"ruleId":"207","severity":1,"message":"211","line":2,"column":42,"nodeType":"209","messageId":"210","endLine":2,"endColumn":50},{"ruleId":"203","replacedBy":"212"},{"ruleId":"205","replacedBy":"213"},{"ruleId":"207","severity":1,"message":"214","line":1,"column":10,"nodeType":"209","messageId":"210","endLine":1,"endColumn":14},{"ruleId":"207","severity":1,"message":"215","line":6,"column":8,"nodeType":"209","messageId":"210","endLine":6,"endColumn":19},{"ruleId":"216","severity":1,"message":"217","line":67,"column":9,"nodeType":"218","messageId":"219","endLine":75,"endColumn":10},{"ruleId":"220","severity":1,"message":"221","line":68,"column":81,"nodeType":"222","messageId":"223","endLine":68,"endColumn":83},{"ruleId":"220","severity":1,"message":"221","line":86,"column":46,"nodeType":"222","messageId":"223","endLine":86,"endColumn":48},{"ruleId":"220","severity":1,"message":"224","line":98,"column":71,"nodeType":"222","messageId":"223","endLine":98,"endColumn":73},{"ruleId":"203","replacedBy":"225"},{"ruleId":"205","replacedBy":"226"},{"ruleId":"207","severity":1,"message":"227","line":5,"column":25,"nodeType":"209","messageId":"210","endLine":5,"endColumn":31},{"ruleId":"207","severity":1,"message":"228","line":25,"column":8,"nodeType":"209","messageId":"210","endLine":25,"endColumn":12},{"ruleId":"207","severity":1,"message":"229","line":28,"column":10,"nodeType":"209","messageId":"210","endLine":28,"endColumn":16},{"ruleId":"220","severity":1,"message":"224","line":72,"column":33,"nodeType":"222","messageId":"223","endLine":72,"endColumn":35},{"ruleId":"220","severity":1,"message":"221","line":87,"column":26,"nodeType":"222","messageId":"223","endLine":87,"endColumn":28},{"ruleId":"216","severity":1,"message":"217","line":111,"column":9,"nodeType":"218","messageId":"219","endLine":119,"endColumn":10},{"ruleId":"220","severity":1,"message":"221","line":124,"column":27,"nodeType":"222","messageId":"223","endLine":124,"endColumn":29},{"ruleId":"220","severity":1,"message":"224","line":124,"column":65,"nodeType":"222","messageId":"223","endLine":124,"endColumn":67},{"ruleId":"220","severity":1,"message":"221","line":127,"column":32,"nodeType":"222","messageId":"223","endLine":127,"endColumn":34},{"ruleId":"220","severity":1,"message":"221","line":127,"column":70,"nodeType":"222","messageId":"223","endLine":127,"endColumn":72},{"ruleId":"220","severity":1,"message":"224","line":142,"column":53,"nodeType":"222","messageId":"223","endLine":142,"endColumn":55},{"ruleId":"230","severity":1,"message":"231","line":206,"column":21,"nodeType":"232","endLine":216,"endColumn":23},{"ruleId":"203","replacedBy":"233"},{"ruleId":"205","replacedBy":"234"},{"ruleId":"207","severity":1,"message":"235","line":3,"column":8,"nodeType":"209","messageId":"210","endLine":3,"endColumn":15},{"ruleId":"220","severity":1,"message":"224","line":215,"column":34,"nodeType":"222","messageId":"223","endLine":215,"endColumn":36},{"ruleId":"220","severity":1,"message":"224","line":218,"column":39,"nodeType":"222","messageId":"223","endLine":218,"endColumn":41},{"ruleId":"220","severity":1,"message":"224","line":229,"column":14,"nodeType":"222","messageId":"223","endLine":229,"endColumn":16},{"ruleId":"220","severity":1,"message":"224","line":232,"column":19,"nodeType":"222","messageId":"223","endLine":232,"endColumn":21},{"ruleId":"207","severity":1,"message":"236","line":15,"column":8,"nodeType":"209","messageId":"210","endLine":15,"endColumn":18},{"ruleId":"207","severity":1,"message":"237","line":25,"column":8,"nodeType":"209","messageId":"210","endLine":25,"endColumn":16},{"ruleId":"207","severity":1,"message":"238","line":26,"column":10,"nodeType":"209","messageId":"210","endLine":26,"endColumn":16},{"ruleId":"207","severity":1,"message":"239","line":28,"column":10,"nodeType":"209","messageId":"210","endLine":28,"endColumn":17},{"ruleId":"207","severity":1,"message":"240","line":28,"column":19,"nodeType":"209","messageId":"210","endLine":28,"endColumn":31},{"ruleId":"207","severity":1,"message":"241","line":28,"column":33,"nodeType":"209","messageId":"210","endLine":28,"endColumn":44},{"ruleId":"207","severity":1,"message":"242","line":131,"column":11,"nodeType":"209","messageId":"210","endLine":131,"endColumn":16},{"ruleId":"207","severity":1,"message":"242","line":138,"column":13,"nodeType":"209","messageId":"210","endLine":138,"endColumn":18},{"ruleId":"220","severity":1,"message":"224","line":172,"column":20,"nodeType":"222","messageId":"223","endLine":172,"endColumn":22},{"ruleId":"220","severity":1,"message":"224","line":184,"column":13,"nodeType":"222","messageId":"223","endLine":184,"endColumn":15},{"ruleId":"207","severity":1,"message":"238","line":5,"column":10,"nodeType":"209","messageId":"210","endLine":5,"endColumn":16},{"ruleId":"207","severity":1,"message":"227","line":6,"column":25,"nodeType":"209","messageId":"210","endLine":6,"endColumn":31},{"ruleId":"207","severity":1,"message":"243","line":6,"column":33,"nodeType":"209","messageId":"210","endLine":6,"endColumn":46},{"ruleId":"207","severity":1,"message":"228","line":26,"column":8,"nodeType":"209","messageId":"210","endLine":26,"endColumn":12},{"ruleId":"207","severity":1,"message":"244","line":28,"column":22,"nodeType":"209","messageId":"210","endLine":28,"endColumn":36},{"ruleId":"230","severity":1,"message":"231","line":114,"column":21,"nodeType":"232","endLine":115,"endColumn":23},{"ruleId":"207","severity":1,"message":"245","line":5,"column":18,"nodeType":"209","messageId":"210","endLine":5,"endColumn":32},{"ruleId":"220","severity":1,"message":"224","line":34,"column":32,"nodeType":"222","messageId":"223","endLine":34,"endColumn":34},{"ruleId":"220","severity":1,"message":"224","line":75,"column":26,"nodeType":"222","messageId":"223","endLine":75,"endColumn":28},{"ruleId":"220","severity":1,"message":"224","line":88,"column":26,"nodeType":"222","messageId":"223","endLine":88,"endColumn":28},{"ruleId":"220","severity":1,"message":"224","line":97,"column":26,"nodeType":"222","messageId":"223","endLine":97,"endColumn":28},{"ruleId":"220","severity":1,"message":"224","line":106,"column":26,"nodeType":"222","messageId":"223","endLine":106,"endColumn":28},{"ruleId":"220","severity":1,"message":"224","line":114,"column":26,"nodeType":"222","messageId":"223","endLine":114,"endColumn":28},{"ruleId":"207","severity":1,"message":"246","line":132,"column":15,"nodeType":"209","messageId":"210","endLine":132,"endColumn":22},{"ruleId":"207","severity":1,"message":"238","line":5,"column":10,"nodeType":"209","messageId":"210","endLine":5,"endColumn":16},{"ruleId":"207","severity":1,"message":"227","line":6,"column":25,"nodeType":"209","messageId":"210","endLine":6,"endColumn":31},{"ruleId":"207","severity":1,"message":"228","line":26,"column":8,"nodeType":"209","messageId":"210","endLine":26,"endColumn":12},{"ruleId":"207","severity":1,"message":"247","line":28,"column":10,"nodeType":"209","messageId":"210","endLine":28,"endColumn":18},{"ruleId":"207","severity":1,"message":"248","line":28,"column":20,"nodeType":"209","messageId":"210","endLine":28,"endColumn":26},{"ruleId":"220","severity":1,"message":"224","line":72,"column":33,"nodeType":"222","messageId":"223","endLine":72,"endColumn":35},{"ruleId":"220","severity":1,"message":"224","line":87,"column":26,"nodeType":"222","messageId":"223","endLine":87,"endColumn":28},{"ruleId":"216","severity":1,"message":"217","line":111,"column":9,"nodeType":"218","messageId":"219","endLine":119,"endColumn":10},{"ruleId":"220","severity":1,"message":"221","line":124,"column":25,"nodeType":"222","messageId":"223","endLine":124,"endColumn":27},{"ruleId":"220","severity":1,"message":"224","line":124,"column":63,"nodeType":"222","messageId":"223","endLine":124,"endColumn":65},{"ruleId":"220","severity":1,"message":"221","line":127,"column":30,"nodeType":"222","messageId":"223","endLine":127,"endColumn":32},{"ruleId":"220","severity":1,"message":"221","line":127,"column":68,"nodeType":"222","messageId":"223","endLine":127,"endColumn":70},{"ruleId":"220","severity":1,"message":"224","line":144,"column":50,"nodeType":"222","messageId":"223","endLine":144,"endColumn":52},{"ruleId":"207","severity":1,"message":"238","line":5,"column":10,"nodeType":"209","messageId":"210","endLine":5,"endColumn":16},{"ruleId":"207","severity":1,"message":"227","line":6,"column":25,"nodeType":"209","messageId":"210","endLine":6,"endColumn":31},{"ruleId":"207","severity":1,"message":"243","line":6,"column":33,"nodeType":"209","messageId":"210","endLine":6,"endColumn":46},{"ruleId":"207","severity":1,"message":"228","line":26,"column":8,"nodeType":"209","messageId":"210","endLine":26,"endColumn":12},{"ruleId":"207","severity":1,"message":"244","line":28,"column":22,"nodeType":"209","messageId":"210","endLine":28,"endColumn":36},{"ruleId":"230","severity":1,"message":"231","line":178,"column":21,"nodeType":"232","endLine":179,"endColumn":23},{"ruleId":"203","replacedBy":"249"},{"ruleId":"205","replacedBy":"250"},{"ruleId":"207","severity":1,"message":"238","line":5,"column":10,"nodeType":"209","messageId":"210","endLine":5,"endColumn":16},{"ruleId":"207","severity":1,"message":"227","line":6,"column":25,"nodeType":"209","messageId":"210","endLine":6,"endColumn":31},{"ruleId":"207","severity":1,"message":"243","line":6,"column":33,"nodeType":"209","messageId":"210","endLine":6,"endColumn":46},{"ruleId":"207","severity":1,"message":"228","line":26,"column":8,"nodeType":"209","messageId":"210","endLine":26,"endColumn":12},{"ruleId":"207","severity":1,"message":"244","line":28,"column":22,"nodeType":"209","messageId":"210","endLine":28,"endColumn":36},{"ruleId":"230","severity":1,"message":"231","line":122,"column":21,"nodeType":"232","endLine":123,"endColumn":23},{"ruleId":"207","severity":1,"message":"214","line":1,"column":10,"nodeType":"209","messageId":"210","endLine":1,"endColumn":14},{"ruleId":"207","severity":1,"message":"215","line":6,"column":8,"nodeType":"209","messageId":"210","endLine":6,"endColumn":19},{"ruleId":"216","severity":1,"message":"217","line":71,"column":9,"nodeType":"218","messageId":"219","endLine":79,"endColumn":10},{"ruleId":"220","severity":1,"message":"221","line":72,"column":105,"nodeType":"222","messageId":"223","endLine":72,"endColumn":107},{"ruleId":"220","severity":1,"message":"221","line":91,"column":46,"nodeType":"222","messageId":"223","endLine":91,"endColumn":48},{"ruleId":"220","severity":1,"message":"224","line":106,"column":71,"nodeType":"222","messageId":"223","endLine":106,"endColumn":73},"no-native-reassign",["251"],"no-negated-in-lhs",["252"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.",["251"],["252"],"'keys' is defined but never used.","'dataReducer' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.",["251"],["252"],"'Column' is defined but never used.","'View' is defined but never used.","'Height' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["251"],["252"],"'history' is defined but never used.","'IconButton' is defined but never used.","'MenuIcon' is defined but never used.","'Button' is defined but never used.","'checkDM' is defined but never used.","'checkComment' is defined but never used.","'checkFollow' is defined but never used.","'token' is assigned a value but never used.","'MTableBodyRow' is defined but never used.","'updateIsMarked' is defined but never used.","'DropdownButton' is defined but never used.","'columns' is assigned a value but never used.","'startBot' is defined but never used.","'endBot' is defined but never used.",["251"],["252"],"no-global-assign","no-unsafe-negation"]