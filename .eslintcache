[{"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\App.js":"1","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Landing.js":"2","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\TwitterAccountInfo.js":"3","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Message.js":"4","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\DmInbox.js":"5","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\TwitterAccount.js":"6","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\DashboardFunction.js":"7","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\history.js":"8","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\actions\\actions.js":"9","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\reducers\\index.js":"10","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\CommentInbox.js":"11"},{"size":2760,"mtime":1619334725398,"results":"12","hashOfConfig":"13"},{"size":1304,"mtime":1619049676407,"results":"14","hashOfConfig":"13"},{"size":3591,"mtime":1619369739252,"results":"15","hashOfConfig":"13"},{"size":5687,"mtime":1622182591339,"results":"16","hashOfConfig":"13"},{"size":8949,"mtime":1622188102935,"results":"17","hashOfConfig":"13"},{"size":6193,"mtime":1622182591339,"results":"18","hashOfConfig":"13"},{"size":8475,"mtime":1622188312051,"results":"19","hashOfConfig":"13"},{"size":389,"mtime":1613391439098,"results":"20","hashOfConfig":"13"},{"size":2708,"mtime":1622186924389,"results":"21","hashOfConfig":"13"},{"size":4490,"mtime":1622188945487,"results":"22","hashOfConfig":"13"},{"size":9806,"mtime":1622188201915,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"11fqzy7",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\App.js",["48","49"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Landing.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\TwitterAccountInfo.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Message.js",["50","51","52","53","54","55"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\DmInbox.js",["56","57","58","59","60","61","62","63","64"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\TwitterAccount.js",["65","66","67","68","69"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\DashboardFunction.js",["70","71","72","73","74","75","76"],"import axios from \"axios\";\r\nimport { fetchDataFailed, fetchDataPending, fetchDataSuccess, fetchMessageData, fetchCommentData, commentNotify, dmNotify, sendMsgSuccess,sendCommentSuccess,setSelectedBot, fetchAccountInfo, fetchDmInboxDataSuccess,fetchCommentInboxDataSuccess, updateMarkedDM, updateMarkedComment } from \"./../store/actions/actions\";\r\nimport history from \"./../history\"\r\nconst axiosInstance = axios.create({baseURL: \"http://3.140.95.106:5000\"})\r\n\r\nexport function getAllData() {\r\n    return dispatch => {\r\n        dispatch(fetchDataPending());\r\n        axiosInstance.post(\"/fetch_all_data\").then(res => {\r\n            console.log(\"here is data\", res)\r\n            dispatch(fetchDataSuccess(res.data));\r\n        }).catch(err => {\r\n            console.error(err);\r\n            dispatch(fetchDataFailed());\r\n        })\r\n    }\r\n}\r\n\r\nexport function getDmData() {\r\n    return dispatch => {\r\n        axiosInstance.post('/fetch_dm_data').then(res => {\r\n\r\n            dispatch(fetchDmInboxDataSuccess(res.data));\r\n        }).catch(err => {\r\n            console.error(err);\r\n        })\r\n    }\r\n}\r\n\r\nexport function getCommentData() {\r\n    return dispatch => {\r\n        axiosInstance.post('/fetch_comment_data').then(res => {\r\n\r\n            dispatch(fetchCommentInboxDataSuccess(res.data));\r\n        }).catch(err => {\r\n            console.error(err);\r\n        })\r\n    }\r\n}\r\n\r\n// export function getReport(data) {\r\n//     return dispatch => {\r\n//         axiosInstance.post(\"/getReport\", {\r\n//             bot_number: data\r\n//         }).then((res) => {\r\n//             console.log(\"here is response\", res)\r\n\r\n//         })\r\n//         .catch((err) => {\r\n//             console.log(err);\r\n//         });\r\n//     }\r\n// }\r\n\r\nexport const startBot = (data) => {\r\n    console.log(\"start bot\")\r\n    return axiosInstance\r\n        .post(\"/start_bot\", {\r\n            bot_msg1: data.bot_msg1,\r\n            bot_msg2: data.bot_msg2,\r\n            bot_comment_msg: data.bot_comment_msg,\r\n            lead_number: data.username_num * 10,\r\n            lead_type: data.lead_type,\r\n            bot_number:data.bot_number,\r\n            status: data.status\r\n        })\r\n        .then((res) => {\r\n            console.log(\"DATA FROM BACK\", res.data);\r\n            return res.data;\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nexport const endBot = (data) => {\r\n    console.log(\"end bot\")\r\n    return axiosInstance\r\n        .post(\"/end_bot\", {\r\n            status: data.status,\r\n            bot_number: data.bot_number\r\n        })\r\n        .then((res) => {\r\n            console.log(\"DATA FROM BACK\", res.data);\r\n            return res.data;\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nexport const checkDM = (data) => {\r\n    return axiosInstance\r\n        .post(\"/check_dm\", {\r\n            bot_number: data\r\n        })\r\n        .then((res) => {\r\n            console.log(res.data)\r\n            return res.data;\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nexport const checkFollow = (data) => {\r\n    return axiosInstance\r\n        .post(\"/check_follow\", {\r\n            bot_number: data\r\n        })\r\n        .then((res) => {\r\n            console.log(res.data)\r\n            return res.data;\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nexport const checkComment = (data) => {\r\n    return axiosInstance\r\n        .post(\"/check_comment\", {\r\n            bot_number: data\r\n        })\r\n        .then((res) => {\r\n            console.log(res.data)\r\n            return res.data;\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nexport const displayComment = (data) => {\r\n    console.log(\"here is display comment fucntion\")\r\n    return dispatch => {\r\n        axiosInstance\r\n        .post(\"/display_comment\", {\r\n            username: data.username,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile,\r\n            account_name: data.account_name\r\n        })\r\n        .then((res) => {\r\n            console.log(\"RESPONSE\", res.data)\r\n            dispatch(fetchCommentData(res.data));\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n}\r\n\r\nexport const getAccountInfo = (data) => {\r\n    console.log(\"called account info\")\r\n    return dispatch => {\r\n        axiosInstance\r\n        .post(\"/account_info\", {\r\n            username: data.username,\r\n            bot_number: data.bot_number\r\n        })\r\n        .then((res) => {\r\n            console.log(\"ddd\", res.data)\r\n            dispatch(fetchAccountInfo(res.data))\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n}\r\n\r\nexport const newComment = (data) => {\r\n    return dispatch => axiosInstance\r\n        .post(\"/new_comment\", {\r\n            content: data.content,\r\n            username: data.username,\r\n            account_name: data.account_name,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile,\r\n            previous_content: data.previous_content,\r\n            link: data.link\r\n        })\r\n        .then((res) => {\r\n            console.log(res.data)\r\n            dispatch(sendCommentSuccess(data));\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\n\r\nexport const displayMsg = (data) => {\r\n    console.log(\"here is display masg fucntion\", data)\r\n    return dispatch => {\r\n        axiosInstance\r\n        .post(\"/display_msg\", {\r\n            username: data.username,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile\r\n        })\r\n        .then((res) => {\r\n            console.log(\"RESPONSE\", res.data)\r\n            dispatch(fetchMessageData(res.data));\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n}\r\n\r\nexport const newMsg = (data) => {\r\n    return dispatch => axiosInstance\r\n        .post(\"/new_msg\", {\r\n            content: data.content,\r\n            username: data.username,\r\n            link: data.link,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile,\r\n        })\r\n        .then((res) => {\r\n            dispatch(sendMsgSuccess(data));\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nexport const checkNotification = () => {\r\n    console.log(\"checkNotification\")\r\n    return dispatch => axiosInstance\r\n        .post(\"check_notification\", {\r\n\r\n        })\r\n        .then((res) => {\r\n            console.log(res.data)\r\n            if (res.data.message == \"dm\"){\r\n                dispatch(dmNotify(true));\r\n            }\r\n            else if (res.data.message == \"comment\"){\r\n                dispatch(commentNotify(true));\r\n            }\r\n            \r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nexport const clearNotification = (data) => {\r\n    if (data == \"dm\") {\r\n        return dispatch => dispatch(dmNotify(false))\r\n    }\r\n    else if (data == \"comment\") {\r\n        return dispatch => dispatch(commentNotify(false))\r\n    }\r\n    \r\n}\r\n\r\nexport const setBot = (data) => {\r\n    return dispatch => dispatch(setSelectedBot(data))\r\n}\r\n\r\nexport const updateIsMarkedComment = (data) => {\r\n\r\n    return dispatch => {\r\n        axiosInstance.post(\"/update_is_marked\", {\r\n            account_username: data.account_username,\r\n            to_username: data.to_username,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile,\r\n            coming_time: data.coming_time,\r\n            content: data.content\r\n        })\r\n        .then((res) => {\r\n            if (res.data.code == \"success\"){\r\n                dispatch(updateMarkedComment(data))\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport const updateIsMarkedDm = (data) => {\r\n\r\n    return dispatch => {\r\n        axiosInstance.post(\"/update_is_marked_dm\", {\r\n            account_username: data.account_username,\r\n            username: data.username,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile,\r\n            coming_time: data.coming_time,\r\n            content: data.content\r\n        })\r\n        .then((res) => {\r\n            if (res.data.code == \"success\"){\r\n                dispatch(updateMarkedDM(data))\r\n            }\r\n\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n}","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\history.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\actions\\actions.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\reducers\\index.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\CommentInbox.js",["77","78","79","80","81","82","83","84"],"import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport MaterialTable, { Column, MTableBodyRow, TablePagination } from \"material-table\";\r\n\r\nimport './style.css'\r\n\r\nimport { forwardRef } from 'react';\r\n \r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { getAllData, updateIsMarkedComment, getCommentData} from \"./../api/DashboardFunction\";\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nclass CommentInbox extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hoveringOver: \"\"\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if( this.props.success === true ) return ;\r\n        // this.props.getCommentData();\r\n        this.props.getAllData();\r\n    }\r\n\r\n    handleRowHover = (event, propsData) => {\r\n        this.setState({hoveringOver: propsData.index});\r\n    }\r\n\r\n    handleRowHoverLeave = (event, propsData) => {\r\n        this.setState({hoveringOver: \"\"});\r\n    }\r\n\r\n    isMarkAsRead = (row) => {\r\n        return row.mark_as_read == false;\r\n    }\r\n\r\n    handleDisplayMessage = (event, data) => {\r\n        console.log(\"I am dat!!\", data);\r\n        // udpate is marked\r\n        const info = {\r\n            account_username: data.account_username,\r\n            to_username: data.to_username,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile,\r\n            coming_time: data.coming_time,\r\n            content: data.content\r\n        }\r\n        this.props.updateIsMarkedComment(info)\r\n\r\n        localStorage.setItem('previous_content', data.content);\r\n        localStorage.setItem('link', data.link)\r\n        this.props.history.push(`/comment/${data.account_username}/${data.to_username}/${data.bot_number}/${data.profile}`)\r\n    }\r\n\r\n    dateCompare = (firstDate, secondDate) => {\r\n        const date1 = new Date(firstDate);\r\n        const date2 = new Date(secondDate);\r\n\r\n        if (date1 > date2)\r\n            return -1;\r\n\r\n        if (date1 < date2)\r\n            return 1;\r\n\r\n        return 0;\r\n    }\r\n\r\n    render() {\r\n        if ( this.props.success !== true ) {\r\n            return (\r\n                <div className=\"lds-grid\">\r\n                    <div style={{marginTop: \"100px\"}}><CircularProgress /></div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n        const reply_comment = this.props.reply_comment;\r\n        const { hoveringOver } = this.state;\r\n        let filtered_comment\r\n        if (reply_comment != undefined && this.props.bot_number == 0){\r\n            filtered_comment = reply_comment\r\n        }\r\n        else if (reply_comment != undefined && this.props.bot_number != 0){\r\n            filtered_comment = reply_comment.filter((item) => item.bot_number === this.props.bot_number)\r\n        }\r\n\r\n        if (filtered_comment) {\r\n            // filtered_comment.sort((a, b) => this.dateCompare(a.save_time, b.save_time));\r\n            // for (var i = 0 ; i < filtered_comment.length; i ++) {\r\n            //     const save_time = new Date(filtered_comment[i].save_time);\r\n            //     console.log(\"I am tim!!!\", save_time);\r\n            //     filtered_comment[i].save_time = save_time.toLocaleString('default', { month: 'short', day: 'numeric' })\r\n            // }\r\n            for (var i = 0; i < filtered_comment.length; i++) {\r\n                if (filtered_comment[i].content.length >= 20){\r\n                    filtered_comment[i].content = filtered_comment[i].content.slice(0, 20) + \"...\"\r\n                }\r\n                if (filtered_comment[i].to_username == \"@peachlyapp\") {\r\n                    filtered_comment.splice(i, 1)\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div className=\"table\">\r\n                <MaterialTable\r\n                components={{\r\n                    Pagination: props => {\r\n                      return (\r\n                        <td>\r\n                          <table\r\n                            style={{\r\n                              position: 'fixed',\r\n                              bottom: 0,\r\n                              left: 0,\r\n                              width: '100%',\r\n                              height:'100%',\r\n                            }}\r\n                          >\r\n                            <tbody>\r\n                              <tr>\r\n                                <TablePagination {...props} />\r\n                              </tr>\r\n                            </tbody>\r\n                          </table>\r\n                        </td>\r\n                      );\r\n                    },\r\n                  }}\r\n                    icons={tableIcons}\r\n                    columns={[\r\n                        { title: \"Username\", field: \"to_username\", width: \"20%\" },\r\n                        { title: \"Account Username\", field: \"account_username\", width: \"20%\" },\r\n                        { title: \"Coming Time\", field: \"coming_time\"},\r\n                        { title: \"Message Content\", field: \"content\"},\r\n                        // { title: \"Save Time\", field: \"save_time\"},\r\n                        // { title: \"Link\", field: \"link\"},\r\n                        { title: \"Bot Number\", field: \"bot_number\"},\r\n                        { title: \"Browser Number\", field: \"profile\" },\r\n                    ]}\r\n                    data={filtered_comment}\r\n                    options={{\r\n                        // paging: false,\r\n                        // toolbar: false,\r\n                        pageSizeOptions: [25, 50],\r\n                        pageSize: 25,\r\n                        headerStyle: {\r\n                          backgroundColor: \"#378FC3\",\r\n                          color: \"#FFF\",\r\n                          fontSize: \"17px\",\r\n                          fontWeight: \"bold\"\r\n                        },\r\n                        rowStyle: rowData => ({\r\n                            backgroundColor: this.isMarkAsRead(rowData) ? \"rgba(255,255,255,0.902)\" : \"rgba(242,245,245,0.8)\",\r\n                            fontWeight: this.isMarkAsRead(rowData) ? \"bold\" : \"\",\r\n                            boxShadow: rowData.tableData.id === hoveringOver ? '0px 2px 18px 0px rgba(0,0,0,0.5)' : '',\r\n                        }),\r\n                        tableLayout: \"fixed\"\r\n                    }}\r\n                    title=\"\"\r\n                    components={{\r\n                        Row: props => {\r\n                            return (\r\n                            <MTableBodyRow\r\n                                {...props}\r\n                                onMouseEnter={e => this.handleRowHover(e, props)}\r\n                                onMouseLeave={e => this.handleRowHoverLeave(e, props)}\r\n                            />\r\n                            );\r\n                        },\r\n                    }}\r\n                    onRowClick = {this.handleDisplayMessage}\r\n                    // actions={[\r\n                    //     {\r\n                    //     icon: View,\r\n                    //     tooltip: \"View\",\r\n                    //     onClick: (event, rowData) =>\r\n                    //         {this.handleDisplayComment(rowData)}\r\n                    //     }\r\n                    // ]}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    success: state.success,\r\n    reply_comment: state.data.reply_comment,\r\n    bot_number: state.bot\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    getAllData,\r\n    getCommentData,\r\n    updateIsMarkedComment,\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CommentInbox)",{"ruleId":"85","severity":1,"message":"86","line":1,"column":16,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},{"ruleId":"85","severity":1,"message":"89","line":2,"column":42,"nodeType":"87","messageId":"88","endLine":2,"endColumn":50},{"ruleId":"85","severity":1,"message":"90","line":1,"column":10,"nodeType":"87","messageId":"88","endLine":1,"endColumn":14},{"ruleId":"85","severity":1,"message":"91","line":6,"column":8,"nodeType":"87","messageId":"88","endLine":6,"endColumn":19},{"ruleId":"92","severity":1,"message":"93","line":67,"column":9,"nodeType":"94","messageId":"95","endLine":75,"endColumn":10},{"ruleId":"96","severity":1,"message":"97","line":68,"column":81,"nodeType":"98","messageId":"99","endLine":68,"endColumn":83},{"ruleId":"96","severity":1,"message":"97","line":86,"column":46,"nodeType":"98","messageId":"99","endLine":86,"endColumn":48},{"ruleId":"96","severity":1,"message":"100","line":98,"column":71,"nodeType":"98","messageId":"99","endLine":98,"endColumn":73},{"ruleId":"85","severity":1,"message":"101","line":5,"column":10,"nodeType":"87","messageId":"88","endLine":5,"endColumn":16},{"ruleId":"85","severity":1,"message":"102","line":6,"column":25,"nodeType":"87","messageId":"88","endLine":6,"endColumn":31},{"ruleId":"85","severity":1,"message":"103","line":26,"column":8,"nodeType":"87","messageId":"88","endLine":26,"endColumn":12},{"ruleId":"96","severity":1,"message":"100","line":75,"column":33,"nodeType":"98","messageId":"99","endLine":75,"endColumn":35},{"ruleId":"96","severity":1,"message":"97","line":123,"column":25,"nodeType":"98","messageId":"99","endLine":123,"endColumn":27},{"ruleId":"96","severity":1,"message":"100","line":123,"column":63,"nodeType":"98","messageId":"99","endLine":123,"endColumn":65},{"ruleId":"96","severity":1,"message":"97","line":126,"column":30,"nodeType":"98","messageId":"99","endLine":126,"endColumn":32},{"ruleId":"96","severity":1,"message":"97","line":126,"column":68,"nodeType":"98","messageId":"99","endLine":126,"endColumn":70},{"ruleId":"96","severity":1,"message":"100","line":145,"column":50,"nodeType":"98","messageId":"99","endLine":145,"endColumn":52},{"ruleId":"85","severity":1,"message":"101","line":5,"column":10,"nodeType":"87","messageId":"88","endLine":5,"endColumn":16},{"ruleId":"85","severity":1,"message":"102","line":6,"column":25,"nodeType":"87","messageId":"88","endLine":6,"endColumn":31},{"ruleId":"85","severity":1,"message":"104","line":6,"column":33,"nodeType":"87","messageId":"88","endLine":6,"endColumn":46},{"ruleId":"85","severity":1,"message":"105","line":28,"column":22,"nodeType":"87","messageId":"88","endLine":28,"endColumn":36},{"ruleId":"106","severity":1,"message":"107","line":130,"column":21,"nodeType":"108","endLine":131,"endColumn":23},{"ruleId":"85","severity":1,"message":"109","line":3,"column":8,"nodeType":"87","messageId":"88","endLine":3,"endColumn":15},{"ruleId":"96","severity":1,"message":"100","line":237,"column":34,"nodeType":"98","messageId":"99","endLine":237,"endColumn":36},{"ruleId":"96","severity":1,"message":"100","line":240,"column":39,"nodeType":"98","messageId":"99","endLine":240,"endColumn":41},{"ruleId":"96","severity":1,"message":"100","line":251,"column":14,"nodeType":"98","messageId":"99","endLine":251,"endColumn":16},{"ruleId":"96","severity":1,"message":"100","line":254,"column":19,"nodeType":"98","messageId":"99","endLine":254,"endColumn":21},{"ruleId":"96","severity":1,"message":"100","line":276,"column":31,"nodeType":"98","messageId":"99","endLine":276,"endColumn":33},{"ruleId":"96","severity":1,"message":"100","line":299,"column":31,"nodeType":"98","messageId":"99","endLine":299,"endColumn":33},{"ruleId":"85","severity":1,"message":"102","line":5,"column":25,"nodeType":"87","messageId":"88","endLine":5,"endColumn":31},{"ruleId":"96","severity":1,"message":"100","line":73,"column":33,"nodeType":"98","messageId":"99","endLine":73,"endColumn":35},{"ruleId":"96","severity":1,"message":"97","line":120,"column":27,"nodeType":"98","messageId":"99","endLine":120,"endColumn":29},{"ruleId":"96","severity":1,"message":"100","line":120,"column":65,"nodeType":"98","messageId":"99","endLine":120,"endColumn":67},{"ruleId":"96","severity":1,"message":"97","line":123,"column":32,"nodeType":"98","messageId":"99","endLine":123,"endColumn":34},{"ruleId":"96","severity":1,"message":"97","line":123,"column":70,"nodeType":"98","messageId":"99","endLine":123,"endColumn":72},{"ruleId":"96","severity":1,"message":"100","line":138,"column":53,"nodeType":"98","messageId":"99","endLine":138,"endColumn":55},{"ruleId":"106","severity":1,"message":"107","line":202,"column":21,"nodeType":"108","endLine":212,"endColumn":23},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'keys' is defined but never used.","'dataReducer' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'Button' is defined but never used.","'Column' is defined but never used.","'View' is defined but never used.","'MTableBodyRow' is defined but never used.","'updateIsMarked' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'history' is defined but never used."]