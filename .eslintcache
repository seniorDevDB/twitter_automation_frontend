[{"F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\index.js":"1","F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\TwitterAccountInfo.js":"2","F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\history.js":"3","F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\Landing.js":"4","F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\DmInbox.js":"5","F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\CommentInbox.js":"6"},{"size":624,"mtime":1611778182715,"results":"7","hashOfConfig":"8"},{"size":3591,"mtime":1622095252396,"results":"9","hashOfConfig":"8"},{"size":389,"mtime":1612472598739,"results":"10","hashOfConfig":"8"},{"size":1304,"mtime":1622095252385,"results":"11","hashOfConfig":"8"},{"size":7614,"mtime":1622204267899,"results":"12","hashOfConfig":"8"},{"size":8911,"mtime":1622204283937,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"bcdjj6",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\index.js",[],["28","29"],"F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\TwitterAccountInfo.js",[],"F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\history.js",[],"F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\Landing.js",[],"F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\DmInbox.js",["30","31","32","33","34","35","36","37"],"F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\CommentInbox.js",["38","39","40","41","42","43","44"],"import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport MaterialTable, { Column, MTableBodyRow, TablePagination } from \"material-table\";\r\n\r\nimport './style.css'\r\n\r\nimport { forwardRef } from 'react';\r\n \r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { getAllData, updateIsMarkedComment, getCommentData} from \"./../api/DashboardFunction\";\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nclass CommentInbox extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hoveringOver: \"\"\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if( this.props.success === true ) return ;\r\n        // this.props.getCommentData();\r\n        this.props.getAllData();\r\n    }\r\n\r\n    handleRowHover = (event, propsData) => {\r\n        this.setState({hoveringOver: propsData.index});\r\n    }\r\n\r\n    handleRowHoverLeave = (event, propsData) => {\r\n        this.setState({hoveringOver: \"\"});\r\n    }\r\n\r\n    isMarkAsRead = (row) => {\r\n        return row.mark_as_read == false;\r\n    }\r\n\r\n    handleDisplayMessage = (event, data) => {\r\n        console.log(\"I am dat!!\", data);\r\n        // udpate is marked\r\n        const info = {\r\n            account_username: data.account_username,\r\n            to_username: data.to_username,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile,\r\n            coming_time: data.coming_time,\r\n            content: data.content\r\n        }\r\n        this.props.updateIsMarkedComment(info)\r\n\r\n        localStorage.setItem('previous_content', data.content);\r\n        localStorage.setItem('link', data.link)\r\n        this.props.history.push(`/comment/${data.account_username}/${data.to_username}/${data.bot_number}/${data.profile}`)\r\n    }\r\n\r\n    dateCompare = (firstDate, secondDate) => {\r\n        const date1 = new Date(firstDate);\r\n        const date2 = new Date(secondDate);\r\n\r\n        if (date1 > date2)\r\n            return -1;\r\n\r\n        if (date1 < date2)\r\n            return 1;\r\n\r\n        return 0;\r\n    }\r\n\r\n    render() {\r\n        if ( this.props.success !== true ) {\r\n            return (\r\n                <div className=\"lds-grid\">\r\n                    <div style={{marginTop: \"100px\"}}><CircularProgress /></div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n        const reply_comment = this.props.reply_comment;\r\n        const { hoveringOver } = this.state;\r\n        let filtered_comment\r\n        if (reply_comment != undefined && this.props.bot_number == 0){\r\n            filtered_comment = reply_comment\r\n        }\r\n        else if (reply_comment != undefined && this.props.bot_number != 0){\r\n            filtered_comment = reply_comment.filter((item) => item.bot_number === this.props.bot_number)\r\n        }\r\n\r\n\r\n        return(\r\n            <div className=\"table\">\r\n                <MaterialTable\r\n                components={{\r\n                    Pagination: props => {\r\n                      return (\r\n                        <td>\r\n                          <table\r\n                            style={{\r\n                              position: 'fixed',\r\n                              bottom: 0,\r\n                              left: 0,\r\n                              width: '100%',\r\n                              height:'100%',\r\n                            }}\r\n                          >\r\n                            <tbody>\r\n                              <tr>\r\n                                <TablePagination {...props} />\r\n                              </tr>\r\n                            </tbody>\r\n                          </table>\r\n                        </td>\r\n                      );\r\n                    },\r\n                  }}\r\n                    icons={tableIcons}\r\n                    columns={[\r\n                        { title: \"Username\", field: \"to_username\", width: \"20%\" },\r\n                        { title: \"Account Username\", field: \"account_username\", width: \"20%\" },\r\n                        { title: \"Coming Time\", field: \"coming_time\"},\r\n                        { title: \"Message Content\", field: \"content\"},\r\n                        // { title: \"Save Time\", field: \"save_time\"},\r\n                        // { title: \"Link\", field: \"link\"},\r\n                        { title: \"Bot Number\", field: \"bot_number\"},\r\n                        { title: \"Browser Number\", field: \"profile\" },\r\n                    ]}\r\n                    data={filtered_comment}\r\n                    options={{\r\n                        // paging: false,\r\n                        // toolbar: false,\r\n                        pageSizeOptions: [25, 50],\r\n                        pageSize: 25,\r\n                        headerStyle: {\r\n                          backgroundColor: \"#378FC3\",\r\n                          color: \"#FFF\",\r\n                          fontSize: \"17px\",\r\n                          fontWeight: \"bold\"\r\n                        },\r\n                        rowStyle: rowData => ({\r\n                            backgroundColor: this.isMarkAsRead(rowData) ? \"rgba(255,255,255,0.902)\" : \"rgba(242,245,245,0.8)\",\r\n                            fontWeight: this.isMarkAsRead(rowData) ? \"bold\" : \"\",\r\n                            boxShadow: rowData.tableData.id === hoveringOver ? '0px 2px 18px 0px rgba(0,0,0,0.5)' : '',\r\n                        }),\r\n                        tableLayout: \"fixed\"\r\n                    }}\r\n                    title=\"\"\r\n                    components={{\r\n                        Row: props => {\r\n                            return (\r\n                            <MTableBodyRow\r\n                                {...props}\r\n                                onMouseEnter={e => this.handleRowHover(e, props)}\r\n                                onMouseLeave={e => this.handleRowHoverLeave(e, props)}\r\n                            />\r\n                            );\r\n                        },\r\n                    }}\r\n                    onRowClick = {this.handleDisplayMessage}\r\n                    // actions={[\r\n                    //     {\r\n                    //     icon: View,\r\n                    //     tooltip: \"View\",\r\n                    //     onClick: (event, rowData) =>\r\n                    //         {this.handleDisplayComment(rowData)}\r\n                    //     }\r\n                    // ]}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    success: state.success,\r\n    reply_comment: state.data.reply_comment,\r\n    bot_number: state.bot\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    getAllData,\r\n    getCommentData,\r\n    updateIsMarkedComment,\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CommentInbox)",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":5,"column":10,"nodeType":"51","messageId":"52","endLine":5,"endColumn":16},{"ruleId":"49","severity":1,"message":"53","line":6,"column":25,"nodeType":"51","messageId":"52","endLine":6,"endColumn":31},{"ruleId":"49","severity":1,"message":"54","line":26,"column":8,"nodeType":"51","messageId":"52","endLine":26,"endColumn":12},{"ruleId":"55","severity":1,"message":"56","line":75,"column":33,"nodeType":"57","messageId":"58","endLine":75,"endColumn":35},{"ruleId":"55","severity":1,"message":"59","line":124,"column":25,"nodeType":"57","messageId":"58","endLine":124,"endColumn":27},{"ruleId":"55","severity":1,"message":"56","line":124,"column":63,"nodeType":"57","messageId":"58","endLine":124,"endColumn":65},{"ruleId":"55","severity":1,"message":"59","line":127,"column":30,"nodeType":"57","messageId":"58","endLine":127,"endColumn":32},{"ruleId":"55","severity":1,"message":"59","line":127,"column":68,"nodeType":"57","messageId":"58","endLine":127,"endColumn":70},{"ruleId":"49","severity":1,"message":"53","line":5,"column":25,"nodeType":"51","messageId":"52","endLine":5,"endColumn":31},{"ruleId":"55","severity":1,"message":"56","line":73,"column":33,"nodeType":"57","messageId":"58","endLine":73,"endColumn":35},{"ruleId":"55","severity":1,"message":"59","line":120,"column":27,"nodeType":"57","messageId":"58","endLine":120,"endColumn":29},{"ruleId":"55","severity":1,"message":"56","line":120,"column":65,"nodeType":"57","messageId":"58","endLine":120,"endColumn":67},{"ruleId":"55","severity":1,"message":"59","line":123,"column":32,"nodeType":"57","messageId":"58","endLine":123,"endColumn":34},{"ruleId":"55","severity":1,"message":"59","line":123,"column":70,"nodeType":"57","messageId":"58","endLine":123,"endColumn":72},{"ruleId":"60","severity":1,"message":"61","line":185,"column":21,"nodeType":"62","endLine":195,"endColumn":23},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Column' is defined but never used.","'View' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]