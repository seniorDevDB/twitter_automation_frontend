<<<<<<< HEAD
[{"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\store.js":"2","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Dashboard.js":"3","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Comment.js":"4","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Navbar.js":"5","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Message.js":"6","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Login.js":"7","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Landing.js":"8","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Report.js":"9","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\TwitterAccount.js":"10","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\TwitterAccountInfo.js":"11","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\api.js":"12","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\DashboardFunction.js":"13","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\App.js":"14","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\reducers\\index.js":"15","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\actions\\actions.js":"16","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\DmInbox.js":"17","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\reportWebVitals.js":"18"},{"size":646,"mtime":1613391439098,"results":"19","hashOfConfig":"20"},{"size":656,"mtime":1622182591339,"results":"21","hashOfConfig":"20"},{"size":8594,"mtime":1622182591339,"results":"22","hashOfConfig":"20"},{"size":6645,"mtime":1621222170757,"results":"23","hashOfConfig":"20"},{"size":9517,"mtime":1624516632211,"results":"24","hashOfConfig":"20"},{"size":5762,"mtime":1623414938487,"results":"25","hashOfConfig":"20"},{"size":5561,"mtime":1618994365217,"results":"26","hashOfConfig":"20"},{"size":1304,"mtime":1619049676407,"results":"27","hashOfConfig":"20"},{"size":7403,"mtime":1624267878653,"results":"28","hashOfConfig":"20"},{"size":5996,"mtime":1624267912951,"results":"29","hashOfConfig":"20"},{"size":3591,"mtime":1619369739252,"results":"30","hashOfConfig":"20"},{"size":327,"mtime":1618985201146,"results":"31","hashOfConfig":"20"},{"size":8525,"mtime":1623415378100,"results":"32","hashOfConfig":"20"},{"size":2792,"mtime":1624517079208,"results":"33","hashOfConfig":"20"},{"size":4490,"mtime":1622188945487,"results":"34","hashOfConfig":"20"},{"size":2708,"mtime":1622186924389,"results":"35","hashOfConfig":"20"},{"size":8955,"mtime":1623672102574,"results":"36","hashOfConfig":"20"},{"size":375,"mtime":1613391439098,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"11fqzy7",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\index.js",[],["81","82"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\store.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Dashboard.js",["83","84","85","86","87","88","89","90"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Comment.js",["91","92","93","94","95","96"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Navbar.js",["97","98","99","100","101","102","103","104","105","106","107","108","109","110"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n// import jwt_decode from \"jwt-decode\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport AssessmentIcon from '@material-ui/icons/Assessment';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport StorageIcon from '@material-ui/icons/Storage';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { Button, DropdownButton,Dropdown } from 'react-bootstrap';\r\n\r\nimport { checkDM, checkComment, checkFollow, clearNotification, setBot} from \"./../api/DashboardFunction\";\r\n\r\nimport { useHistory } from \"react-router\";\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  menu: {\r\n    color: '#fff',\r\n    marginRight: '15px',\r\n    '&:hover': {\r\n      color: '#42f59b'\r\n    }\r\n  },\r\n  faq: {\r\n    color: '#fff',\r\n    marginRight: '20px',\r\n    marginTop: '4px',\r\n    '&:hover': {\r\n      color: '#42f59b'\r\n    }\r\n  }\r\n}));\r\n\r\nconst Navbar = ({handleDrawerOpen, hasHamburger, open, hanldeModalState, dmNotification, commentNotification, clearNotification, setBot}) => {\r\n    const classes = useStyles();\r\n    const token = localStorage.token;\r\n    const history = useHistory();\r\n    const [title, setTitle] = useState(\"Bot List\");\r\n\r\n    function logout () {\r\n      console.log(\"logout\")\r\n      //call api to update login status\r\n      const token = localStorage.token;\r\n      localStorage.clear();\r\n      window.location.href = \"/login\";\r\n    }\r\n\r\n    function commentReply() {\r\n        console.log(\"comment reply\")\r\n        clearNotification(\"comment\")\r\n        history.push({pathname: '/comment-inbox'});\r\n    }\r\n\r\n    function dmReply() {\r\n        clearNotification(\"dm\")\r\n        history.push({pathname: '/dm-inbox'});\r\n    }\r\n\r\n    function goToReport() {\r\n      history.push({pathname: '/report'})\r\n    }\r\n\r\n    function goToLead() {\r\n      history.push({pathname: '/lead'})\r\n    }\r\n\r\n    function GoToHome() {\r\n        history.push({pathname: '/dashboard'})\r\n    }\r\n\r\n    function GoToTwitterAccount() {\r\n      history.push({pathname: '/twitter_account'})\r\n    }\r\n\r\n    function handleBot(botIndex) {\r\n      console.log(\"bot selected:\", botIndex)\r\n      if (botIndex == 0){\r\n        setTitle(`All Bots`)\r\n      }\r\n      else {\r\n        setTitle(`Bot ${botIndex}`)\r\n      }\r\n      //here update the redux state\r\n      setBot(botIndex)\r\n    }\r\n\r\n    const botDropDown = [];\r\n    for (let i = 0; i < 10; i++) {\r\n      if (i == 0){\r\n        botDropDown.push(<Dropdown.Item as=\"button\" onClick={ () => handleBot(i) }>All Bots</Dropdown.Item>)\r\n      }\r\n      else{\r\n        botDropDown.push(<Dropdown.Item as=\"button\" onClick={ () => handleBot(i) }>Bot{i}</Dropdown.Item>)\r\n      }\r\n    }\r\n\r\n    return (\r\n        <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)} style={{backgroundColor: \"#42389d\"}}>\r\n            <Toolbar className={classes.toolbar}>\r\n            {localStorage.token ? \r\n              <div style={{width:\"100%\"}}>\r\n                <DropdownButton className={`${classes.menu} float-left`} id=\"bot_list\" title={title}>\r\n                  <Dropdown.ItemText>Select The Bot!</Dropdown.ItemText>\r\n                  {botDropDown}\r\n                </DropdownButton>\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ GoToHome }>\r\n                  <Tooltip title=\"Home\">\r\n                    <HomeIcon fontSize=\"large\"/>\r\n                  </Tooltip>\r\n                </Typography>\r\n                {/* <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ commentReply }>\r\n                {\r\n                    commentNotification && \r\n                    <Badge color=\"error\" badgeContent=\" \" variant=\"dot\">\r\n                        <Tooltip title=\"Comment\">\r\n                          <CommentIcon fontSize=\"large\"/>\r\n                        </Tooltip>\r\n                    </Badge>\r\n                }\r\n                {\r\n                    !commentNotification && <Tooltip title=\"Comment\"><CommentIcon fontSize=\"large\"/></Tooltip>\r\n                }\r\n                \r\n                </Typography> */}\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ dmReply }>\r\n                {\r\n                    dmNotification && \r\n                    <Badge color=\"error\" badgeContent=\" \" variant=\"dot\">\r\n                      <Tooltip title=\"DM\">\r\n                         <MessageIcon fontSize=\"large\"/>\r\n                      </Tooltip>\r\n                    </Badge>\r\n                }\r\n                {\r\n                    !dmNotification && <Tooltip title=\"DM\"><MessageIcon fontSize=\"large\"/></Tooltip>\r\n                }\r\n                </Typography>\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ goToReport }>\r\n                  <Tooltip title=\"Report\">\r\n                    <AssessmentIcon fontSize=\"large\"/>\r\n                    </Tooltip>\r\n                </Typography>\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ GoToTwitterAccount }>\r\n                  <Tooltip title=\"Twitter Account\">\r\n                    <AccountBoxIcon fontSize=\"large\"/>\r\n                  </Tooltip>\r\n                </Typography>\r\n                {/* <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ goToLead }>\r\n                  <Tooltip title=\"Leads\">\r\n                    <StorageIcon fontSize=\"large\"/>\r\n                  </Tooltip>\r\n                </Typography> */}\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-right`} color=\"inherit\" onClick={ logout }>\r\n                  <Tooltip title=\"Logout\">\r\n                    <ExitToAppIcon fontSize=\"large\"/>\r\n                    </Tooltip>\r\n                </Typography>\r\n              </div> :\r\n              <div style={{width:\"100%\"}}>\r\n                {/* <Link to=\"join\"><Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-right`} color=\"inherit\" >\r\n                  Signup\r\n                </Typography></Link> */}\r\n                <Link to=\"login\"><Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-right`} color=\"inherit\">\r\n                  Login\r\n                </Typography></Link>\r\n              </div>\r\n          }\r\n           </Toolbar>\r\n      </AppBar>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    dmNotification: state.dmNotification,\r\n    commentNotification: state.commentNotification\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    clearNotification,\r\n    setBot\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Navbar)","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Message.js",["111","112","113","114","115","116"],"import { keys } from \"@material-ui/core/styles/createBreakpoints\";\r\nimport React, { Component } from \"react\";\r\nimport { Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport dataReducer from \"../store/reducers\";\r\nimport { displayMsg, newMsg } from \"./../api/DashboardFunction\";\r\n\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\n\r\nclass Message extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            msg_content: \"\",\r\n            username: \"\",\r\n            bot_number: \"\",\r\n            profile_port: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const username = this.props.match.params.id;\r\n        const bot_number = this.props.match.params.num;\r\n        const profile = this.props.match.params.profile\r\n        console.log(\"profile\", profile)\r\n        \r\n        this.setState({username: username, bot_number: bot_number, profile_port: profile})\r\n        const data = {\r\n            username: username,\r\n            bot_number: bot_number,\r\n            profile_port: profile\r\n        }\r\n        this.props.displayMsg(data);\r\n    }\r\n\r\n    onChange = (e) => {\r\n        console.log(\"I am changed!!!!!!!!!!\", e.target.value);\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        console.log(\"kkk\", this.state.msg1)\r\n    }\r\n\r\n    sendMsg = () => {\r\n        console.log(\"send msg\", this.state.profile_port)\r\n        const data = {\r\n            username: this.state.username,\r\n            bot_number: this.state.bot_number,\r\n            profile_port: this.state.profile_port,\r\n            content: this.state.msg_content,\r\n            link: localStorage.getItem('dm_link'),\r\n        }\r\n        console.log(\"data\", data)\r\n        this.props.newMsg(data)\r\n        this.setState({msg_content: \"\"})\r\n        // .then((res) => {\r\n        //     if (res.code == \"failed\"){\r\n        //         alert(res.message)\r\n        //     }\r\n        //     else {\r\n        //         alert(\"dm sent\")\r\n        //         this.setState({msg_content: \"\"})\r\n        //     }\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        {\r\n            if ( this.props.msg_data == null || this.props.msg_data[0].username != this.state.username) {\r\n                return (\r\n                    <div className=\"lds-grid\">\r\n                        <div></div><div></div><div></div><div></div><div></div><div></div>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        console.log(\"msg data\", this.props.msg_data)\r\n        const msgData = this.props.msg_data\r\n        console.log(\"mmm\", msgData)\r\n        return (\r\n            <div className=\"content-wrapper\">\r\n            <div className=\"card\">\r\n            <div className=\"no-gutters\" style={{paddingTop:\"45px\"}}>\r\n                <div className=\"chat-container\">\r\n                    <ul className=\"chat-box chatContainerScroll\">\r\n                        {msgData && msgData.map((data, index) => (\r\n                            data.coming_time != '' ? (\r\n                                <li className=\"chat-left\" key={index}>\r\n                                    <div className=\"chat-avatar\">  \r\n                                        <AccountCircleIcon fontSize=\"large\"/>                   \r\n                                        <div className=\"chat-name\">{data.username}</div>\r\n                                    </div>\r\n                                    <div class=\"chat-text\">\r\n                                        {data.content}\r\n                                    </div>\r\n                                    <div class=\"chat-hour\">{data.coming_time}</div>\r\n                                </li>) : (\r\n                                <li className=\"chat-right\" key={index}>\r\n                                    {data.new_reply || data.new_reply == false ? (\r\n                                        <div className=\"chat-hour\">\"Sent\"</div>\r\n                                    ) : (<div className=\"chat-hour\">\"Pending\"</div>)}\r\n                                    <div className=\"chat-hour\">{ data.coming_time }</div>\r\n                                    <div className=\"chat-text\">\r\n                                    { data.content }\r\n                                    </div>\r\n                                    <div className=\"chat-avatar\">   \r\n                                        <AccountBoxIcon fontSize=\"large\"/>                            \r\n                                        <div className=\"chat-name\">{ data.username }</div>\r\n                                    </div>\r\n                                </li>\r\n                            )\r\n                        ))}\r\n                    </ul>\r\n\r\n                    <div>\r\n                          <div style={{marginTop:\"-10px\",display:\"flex\"}}>\r\n                                <textarea rows=\"3\" onChange={this.onChange} id=\"msg-content\" name= \"msg_content\" value={this.state.msg_content} placeholder=\"Type your message here...\"></textarea>\r\n                                <Button onClick={this.sendMsg} style={{marginTop:\"auto\",marginBottom: \"auto\", marginLeft:\"20px\", padding: '10px 30px', height: '100%'}}>Send</Button>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    msg_status: state.msgData.code,\r\n    msg_data: state.msgData.message\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    displayMsg,\r\n    newMsg\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Message)","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Login.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Landing.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Report.js",["117","118","119","120","121"],"import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { Button } from 'react-bootstrap';\r\nimport MaterialTable, { Column, MTableBodyRow, TablePagination } from \"material-table\";\r\n\r\nimport './style.css'\r\n\r\nimport { forwardRef } from 'react';\r\n \r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport { getAllData, updateIsMarked} from \"./../api/DashboardFunction\";\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n  };\r\n\r\nclass CommentInbox extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hoveringOver: \"\"\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n      if( this.props.success === true ) return ;\r\n      this.props.getAllData();\r\n    }\r\n\r\n    downloadCSV(csv, filename) {\r\n        let csvFile;\r\n        let downloadLink;\r\n    \r\n        // CSV file\r\n        csvFile = new Blob([csv], {type: \"text/csv\"});\r\n    \r\n        // Download link\r\n        downloadLink = document.createElement(\"a\");\r\n    \r\n        // File name\r\n        downloadLink.download = filename;\r\n    \r\n        // Create a link to the file\r\n        downloadLink.href = window.URL.createObjectURL(csvFile);\r\n    \r\n        // Hide download link\r\n        downloadLink.style.display = \"none\";\r\n    \r\n        // Add the link to DOM\r\n        document.body.appendChild(downloadLink);\r\n    \r\n        // Click download link\r\n        downloadLink.click();\r\n    }\r\n\r\n    exportToCSV() {\r\n        let csv = [];\r\n        let titles = [\r\n            \"Bot Number\",\r\n            \"Number of Leads\",\r\n            \"Follow\",\r\n            \"Follow Back\",\r\n            \"Spintax1 Reply\",\r\n        ];\r\n        csv.push(titles.join(\",\"));\r\n        for( let i = 0; i < this.props.report.length; i ++ ) {\r\n            let data = this.props.report[i];\r\n            let row = [data.bot_number, data.lead_number, data.sent_dm, data.expired_dm,data.spintax1_reply, data.spintax2_reply,data.comment, data.expired_comment,data.comment_reply, data.follow, data.follow_back];\r\n            csv.push(row.join(','));\r\n        }\r\n        this.downloadCSV(csv.join(\"\\n\"), \"report.csv\");\r\n    }\r\n\r\n    render() {\r\n        const report = this.props.report;\r\n        // this.exportToCSV();\r\n        if ( this.props.success !== true ) {\r\n          return (\r\n              <div className=\"lds-grid\">\r\n                  <div style={{marginTop: \"100px\"}}><CircularProgress /></div>\r\n              </div>\r\n          )\r\n        }\r\n\r\n        return(\r\n            <div className=\"table\">\r\n                <MaterialTable\r\n                components={{\r\n                    Pagination: props => {\r\n                      return (\r\n                        <td>\r\n                          <table\r\n                            style={{\r\n                              position: 'fixed',\r\n                              bottom: 0,\r\n                              left: 0,\r\n                              width: '100%',\r\n                            }}\r\n                          >\r\n                            <tbody>\r\n                              <tr>\r\n                                <TablePagination {...props} />\r\n                              </tr>\r\n                            </tbody>\r\n                          </table>\r\n                        </td>\r\n                      );\r\n                    },\r\n                  }}\r\n                    icons={tableIcons}\r\n                    columns={[\r\n                        { title: \"Bot Number\", field: \"bot_number\", width: \"20%\" },\r\n                        { title: \"Number of Leads\", field: \"lead_number\", width: \"20%\" },\r\n                        { title: \"Follow\", field: \"follow\"},\r\n                        { title: \"Follow Back\", field: \"follow_back\"},\r\n                        { title: \"Unfollow\", field: \"unfollow\"},\r\n                        { title: \"Spintax1 Reply\", field: \"spintax1_reply\"},\r\n                    ]}\r\n                    data={report}\r\n                    options={{\r\n                        pageSizeOptions: [10, 25, 50],\r\n                        pageSize: 10,\r\n                        headerStyle: {\r\n                          backgroundColor: \"#378FC3\",\r\n                          color: \"#FFF\",\r\n                          fontSize: \"17px\",\r\n                          fontWeight: \"bold\"\r\n                        },\r\n                        tableLayout: \"fixed\"\r\n                    }}\r\n                    actions={[\r\n                        {\r\n                          icon: tableIcons.Export,\r\n                          tooltip: \"Export To CSV\",\r\n                          isFreeAction: true,\r\n                          onClick: () => {\r\n                            this.exportToCSV();\r\n                          }\r\n                        }\r\n                      ]}\r\n                    components={{\r\n                    }}\r\n                    title=\"Report\"\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    success: state.success,\r\n    report: state.data.report,\r\n    bot_number: state.bot\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    getAllData,\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CommentInbox)","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\TwitterAccount.js",["122","123","124","125","126"],"import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { Button } from 'react-bootstrap';\r\nimport MaterialTable, { Column, MTableBodyRow, TablePagination } from \"material-table\";\r\n\r\nimport './style.css'\r\n\r\nimport { forwardRef } from 'react';\r\n \r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport { getAllData, updateIsMarked} from \"./../api/DashboardFunction\";\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n  };\r\n\r\nclass TwitterAccount extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hoveringOver: \"\"\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n      if( this.props.success === true ) return ;\r\n      this.props.getAllData();\r\n    }\r\n\r\n    handleDisplayAccountInfo = (event, data) => {\r\n        this.props.history.push(`/account/${data.username}/${data.bot_number}`)\r\n    }\r\n\r\n    render() {\r\n        const accountData = this.props.account_data;\r\n        // this.exportToCSV();\r\n        if ( this.props.success !== true ) {\r\n          return (\r\n              <div className=\"lds-grid\">\r\n                  <div style={{marginTop: \"100px\"}}><CircularProgress /></div>\r\n              </div>\r\n          )\r\n        }\r\n\r\n        return(\r\n            <div className=\"account_table\">\r\n                <MaterialTable\r\n                components={{\r\n                    Pagination: props => {\r\n                      return (\r\n                        <td>\r\n                          <table\r\n                            style={{\r\n                              position: 'fixed',\r\n                              bottom: 0,\r\n                              left: 0,\r\n                              width: '100%',\r\n                            }}\r\n                          >\r\n                            <tbody>\r\n                              <tr>\r\n                                <TablePagination {...props} />\r\n                              </tr>\r\n                            </tbody>\r\n                          </table>\r\n                        </td>\r\n                      );\r\n                    },\r\n                  }}\r\n                    icons={tableIcons}\r\n                    columns={[\r\n                        { title: \"Username\", field: \"username\", width: \"20%\" },\r\n                        { title: \"Bot Number\", field: \"bot_number\", width: \"20%\" },\r\n                        { title: \"Status\", field: \"status\" },\r\n                        { title: \"Leads\", field: \"number_of_tried_leads\"},\r\n                        { title: \"Follow\", field: \"follow\"},\r\n                        { title: \"Follow Back\", field: \"follow_back\"},\r\n                        { title: \"Unfollow\", field: \"unfollow\"},\r\n                        { title: \"DM Reply\", field: \"dm_reply\"},\r\n\r\n                    ]}\r\n                    data={accountData}\r\n                    options={{\r\n                        pageSizeOptions: [10, 25, 50],\r\n                        pageSize: 10,\r\n                        headerStyle: {\r\n                          backgroundColor: \"#378FC3\",\r\n                          color: \"#FFF\",\r\n                          fontSize: \"17px\",\r\n                          fontWeight: \"bold\",\r\n                        },\r\n                        tableLayout: \"fixed\"\r\n                    }}\r\n                    components={{\r\n                    }}\r\n                    title=\"Lead\"\r\n                    onRowClick = {this.handleDisplayAccountInfo}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    success: state.success,\r\n    account_data: state.data.account,\r\n    bot_number: state.bot\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    getAllData,\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TwitterAccount)","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\TwitterAccountInfo.js",[],["127","128"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\api.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\DashboardFunction.js",["129","130","131","132","133","134","135"],"import axios from \"axios\";\r\nimport { fetchDataFailed, fetchDataPending, fetchDataSuccess, fetchMessageData, fetchCommentData, commentNotify, dmNotify, sendMsgSuccess,sendCommentSuccess,setSelectedBot, fetchAccountInfo, fetchDmInboxDataSuccess,fetchCommentInboxDataSuccess, updateMarkedDM, updateMarkedComment } from \"./../store/actions/actions\";\r\nimport history from \"./../history\"\r\nconst axiosInstance = axios.create({baseURL: \"http://3.140.95.106:5000\"})\r\n\r\nexport function getAllData() {\r\n    return dispatch => {\r\n        dispatch(fetchDataPending());\r\n        axiosInstance.post(\"/fetch_all_data\").then(res => {\r\n            console.log(\"here is data\", res)\r\n            dispatch(fetchDataSuccess(res.data));\r\n        }).catch(err => {\r\n            console.error(err);\r\n            dispatch(fetchDataFailed());\r\n        })\r\n    }\r\n}\r\n\r\nexport function getDmData() {\r\n    return dispatch => {\r\n        axiosInstance.post('/fetch_dm_data').then(res => {\r\n\r\n            dispatch(fetchDmInboxDataSuccess(res.data));\r\n        }).catch(err => {\r\n            console.error(err);\r\n        })\r\n    }\r\n}\r\n\r\nexport function getCommentData() {\r\n    return dispatch => {\r\n        axiosInstance.post('/fetch_comment_data').then(res => {\r\n\r\n            dispatch(fetchCommentInboxDataSuccess(res.data));\r\n        }).catch(err => {\r\n            console.error(err);\r\n        })\r\n    }\r\n}\r\n\r\n// export function getReport(data) {\r\n//     return dispatch => {\r\n//         axiosInstance.post(\"/getReport\", {\r\n//             bot_number: data\r\n//         }).then((res) => {\r\n//             console.log(\"here is response\", res)\r\n\r\n//         })\r\n//         .catch((err) => {\r\n//             console.log(err);\r\n//         });\r\n//     }\r\n// }\r\n\r\nexport const startBot = (data) => {\r\n    console.log(\"start bot\")\r\n    return axiosInstance\r\n        .post(\"/start_bot\", {\r\n            bot_msg1: data.bot_msg1,\r\n            bot_msg2: data.bot_msg2,\r\n            bot_comment_msg: data.bot_comment_msg,\r\n            lead_number: data.username_num * 10,\r\n            lead_type: data.lead_type,\r\n            bot_number:data.bot_number,\r\n            status: data.status\r\n        })\r\n        .then((res) => {\r\n            console.log(\"DATA FROM BACK\", res.data);\r\n            return res.data;\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nexport const endBot = (data) => {\r\n    console.log(\"end bot\")\r\n    return axiosInstance\r\n        .post(\"/end_bot\", {\r\n            status: data.status,\r\n            bot_number: data.bot_number\r\n        })\r\n        .then((res) => {\r\n            console.log(\"DATA FROM BACK\", res.data);\r\n            return res.data;\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nexport const checkDM = (data) => {\r\n    return axiosInstance\r\n        .post(\"/check_dm\", {\r\n            bot_number: data\r\n        })\r\n        .then((res) => {\r\n            console.log(res.data)\r\n            return res.data;\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nexport const checkFollow = (data) => {\r\n    return axiosInstance\r\n        .post(\"/check_follow\", {\r\n            bot_number: data\r\n        })\r\n        .then((res) => {\r\n            console.log(res.data)\r\n            return res.data;\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nexport const checkComment = (data) => {\r\n    return axiosInstance\r\n        .post(\"/check_comment\", {\r\n            bot_number: data\r\n        })\r\n        .then((res) => {\r\n            console.log(res.data)\r\n            return res.data;\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nexport const displayComment = (data) => {\r\n    console.log(\"here is display comment fucntion\")\r\n    return dispatch => {\r\n        axiosInstance\r\n        .post(\"/display_comment\", {\r\n            username: data.username,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile,\r\n            account_name: data.account_name\r\n        })\r\n        .then((res) => {\r\n            console.log(\"RESPONSE\", res.data)\r\n            dispatch(fetchCommentData(res.data));\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n}\r\n\r\nexport const getAccountInfo = (data) => {\r\n    console.log(\"called account info\")\r\n    return dispatch => {\r\n        axiosInstance\r\n        .post(\"/account_info\", {\r\n            username: data.username,\r\n            bot_number: data.bot_number\r\n        })\r\n        .then((res) => {\r\n            console.log(\"ddd\", res.data)\r\n            dispatch(fetchAccountInfo(res.data))\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n}\r\n\r\nexport const newComment = (data) => {\r\n    return dispatch => axiosInstance\r\n        .post(\"/new_comment\", {\r\n            content: data.content,\r\n            username: data.username,\r\n            account_name: data.account_name,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile,\r\n            previous_content: data.previous_content,\r\n            link: data.link\r\n        })\r\n        .then((res) => {\r\n            console.log(res.data)\r\n            dispatch(sendCommentSuccess(data));\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\n\r\nexport const displayMsg = (data) => {\r\n    console.log(\"here is display masg fucntion\", data)\r\n    return dispatch => {\r\n        axiosInstance\r\n        .post(\"/display_msg\", {\r\n            username: data.username,\r\n            bot_number: data.bot_number,\r\n            profile_port: data.profile_port\r\n        })\r\n        .then((res) => {\r\n            console.log(\"RESPONSE\", res.data)\r\n            dispatch(fetchMessageData(res.data));\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n}\r\n\r\nexport const newMsg = (data) => {\r\n    console.log(\"mmm\", data)\r\n    return dispatch => axiosInstance\r\n        .post(\"/new_msg\", {\r\n            content: data.content,\r\n            username: data.username,\r\n            link: data.link,\r\n            bot_number: data.bot_number,\r\n            profile_port: data.profile_port,\r\n        })\r\n        .then((res) => {\r\n            dispatch(sendMsgSuccess(data));\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nexport const checkNotification = () => {\r\n    console.log(\"checkNotification\")\r\n    return dispatch => axiosInstance\r\n        .post(\"check_notification\", {\r\n\r\n        })\r\n        .then((res) => {\r\n            console.log(res.data)\r\n            if (res.data.message == \"dm\"){\r\n                dispatch(dmNotify(true));\r\n            }\r\n            else if (res.data.message == \"comment\"){\r\n                dispatch(commentNotify(true));\r\n            }\r\n            \r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nexport const clearNotification = (data) => {\r\n    if (data == \"dm\") {\r\n        return dispatch => dispatch(dmNotify(false))\r\n    }\r\n    else if (data == \"comment\") {\r\n        return dispatch => dispatch(commentNotify(false))\r\n    }\r\n    \r\n}\r\n\r\nexport const setBot = (data) => {\r\n    return dispatch => dispatch(setSelectedBot(data))\r\n}\r\n\r\nexport const updateIsMarkedComment = (data) => {\r\n\r\n    return dispatch => {\r\n        axiosInstance.post(\"/update_is_marked\", {\r\n            account_username: data.account_username,\r\n            to_username: data.to_username,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile,\r\n            coming_time: data.coming_time,\r\n            content: data.content\r\n        })\r\n        .then((res) => {\r\n            if (res.data.code == \"success\"){\r\n                dispatch(updateMarkedComment(data))\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport const updateIsMarkedDm = (data) => {\r\n\r\n    return dispatch => {\r\n        axiosInstance.post(\"/update_is_marked_dm\", {\r\n            account_username: data.account_username,\r\n            username: data.username,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile,\r\n            coming_time: data.coming_time,\r\n            content: data.content\r\n        })\r\n        .then((res) => {\r\n            if (res.data.code == \"success\"){\r\n                dispatch(updateMarkedDM(data))\r\n            }\r\n\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n}","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\App.js",["136","137","138","139","140"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\reducers\\index.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\actions\\actions.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\DmInbox.js",["141","142","143","144","145","146","147","148","149"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\reportWebVitals.js",[],{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":5,"column":18,"nodeType":"156","messageId":"157","endLine":5,"endColumn":32},{"ruleId":"158","severity":1,"message":"159","line":36,"column":32,"nodeType":"160","messageId":"161","endLine":36,"endColumn":34},{"ruleId":"158","severity":1,"message":"159","line":77,"column":26,"nodeType":"160","messageId":"161","endLine":77,"endColumn":28},{"ruleId":"158","severity":1,"message":"159","line":90,"column":26,"nodeType":"160","messageId":"161","endLine":90,"endColumn":28},{"ruleId":"158","severity":1,"message":"159","line":99,"column":26,"nodeType":"160","messageId":"161","endLine":99,"endColumn":28},{"ruleId":"158","severity":1,"message":"159","line":108,"column":26,"nodeType":"160","messageId":"161","endLine":108,"endColumn":28},{"ruleId":"158","severity":1,"message":"159","line":116,"column":26,"nodeType":"160","messageId":"161","endLine":116,"endColumn":28},{"ruleId":"154","severity":1,"message":"162","line":135,"column":15,"nodeType":"156","messageId":"157","endLine":135,"endColumn":22},{"ruleId":"154","severity":1,"message":"163","line":1,"column":10,"nodeType":"156","messageId":"157","endLine":1,"endColumn":14},{"ruleId":"154","severity":1,"message":"164","line":6,"column":8,"nodeType":"156","messageId":"157","endLine":6,"endColumn":19},{"ruleId":"165","severity":1,"message":"166","line":71,"column":9,"nodeType":"167","messageId":"168","endLine":79,"endColumn":10},{"ruleId":"158","severity":1,"message":"169","line":72,"column":105,"nodeType":"160","messageId":"161","endLine":72,"endColumn":107},{"ruleId":"158","severity":1,"message":"169","line":91,"column":46,"nodeType":"160","messageId":"161","endLine":91,"endColumn":48},{"ruleId":"158","severity":1,"message":"159","line":106,"column":71,"nodeType":"160","messageId":"161","endLine":106,"endColumn":73},{"ruleId":"154","severity":1,"message":"170","line":15,"column":8,"nodeType":"156","messageId":"157","endLine":15,"endColumn":18},{"ruleId":"154","severity":1,"message":"171","line":18,"column":8,"nodeType":"156","messageId":"157","endLine":18,"endColumn":19},{"ruleId":"154","severity":1,"message":"172","line":22,"column":8,"nodeType":"156","messageId":"157","endLine":22,"endColumn":19},{"ruleId":"154","severity":1,"message":"173","line":25,"column":8,"nodeType":"156","messageId":"157","endLine":25,"endColumn":16},{"ruleId":"154","severity":1,"message":"174","line":26,"column":10,"nodeType":"156","messageId":"157","endLine":26,"endColumn":16},{"ruleId":"154","severity":1,"message":"175","line":28,"column":10,"nodeType":"156","messageId":"157","endLine":28,"endColumn":17},{"ruleId":"154","severity":1,"message":"176","line":28,"column":19,"nodeType":"156","messageId":"157","endLine":28,"endColumn":31},{"ruleId":"154","severity":1,"message":"177","line":28,"column":33,"nodeType":"156","messageId":"157","endLine":28,"endColumn":44},{"ruleId":"154","severity":1,"message":"178","line":131,"column":11,"nodeType":"156","messageId":"157","endLine":131,"endColumn":16},{"ruleId":"154","severity":1,"message":"178","line":138,"column":13,"nodeType":"156","messageId":"157","endLine":138,"endColumn":18},{"ruleId":"154","severity":1,"message":"179","line":143,"column":14,"nodeType":"156","messageId":"157","endLine":143,"endColumn":26},{"ruleId":"154","severity":1,"message":"180","line":158,"column":14,"nodeType":"156","messageId":"157","endLine":158,"endColumn":22},{"ruleId":"158","severity":1,"message":"159","line":172,"column":20,"nodeType":"160","messageId":"161","endLine":172,"endColumn":22},{"ruleId":"158","severity":1,"message":"159","line":184,"column":13,"nodeType":"160","messageId":"161","endLine":184,"endColumn":15},{"ruleId":"154","severity":1,"message":"163","line":1,"column":10,"nodeType":"156","messageId":"157","endLine":1,"endColumn":14},{"ruleId":"154","severity":1,"message":"164","line":6,"column":8,"nodeType":"156","messageId":"157","endLine":6,"endColumn":19},{"ruleId":"165","severity":1,"message":"166","line":68,"column":9,"nodeType":"167","messageId":"168","endLine":76,"endColumn":10},{"ruleId":"158","severity":1,"message":"169","line":69,"column":81,"nodeType":"160","messageId":"161","endLine":69,"endColumn":83},{"ruleId":"158","severity":1,"message":"169","line":87,"column":46,"nodeType":"160","messageId":"161","endLine":87,"endColumn":48},{"ruleId":"158","severity":1,"message":"159","line":99,"column":71,"nodeType":"160","messageId":"161","endLine":99,"endColumn":73},{"ruleId":"154","severity":1,"message":"174","line":5,"column":10,"nodeType":"156","messageId":"157","endLine":5,"endColumn":16},{"ruleId":"154","severity":1,"message":"181","line":6,"column":25,"nodeType":"156","messageId":"157","endLine":6,"endColumn":31},{"ruleId":"154","severity":1,"message":"182","line":6,"column":33,"nodeType":"156","messageId":"157","endLine":6,"endColumn":46},{"ruleId":"154","severity":1,"message":"183","line":28,"column":22,"nodeType":"156","messageId":"157","endLine":28,"endColumn":36},{"ruleId":"184","severity":1,"message":"185","line":175,"column":21,"nodeType":"186","endLine":176,"endColumn":23},{"ruleId":"154","severity":1,"message":"174","line":5,"column":10,"nodeType":"156","messageId":"157","endLine":5,"endColumn":16},{"ruleId":"154","severity":1,"message":"181","line":6,"column":25,"nodeType":"156","messageId":"157","endLine":6,"endColumn":31},{"ruleId":"154","severity":1,"message":"182","line":6,"column":33,"nodeType":"156","messageId":"157","endLine":6,"endColumn":46},{"ruleId":"154","severity":1,"message":"183","line":28,"column":22,"nodeType":"156","messageId":"157","endLine":28,"endColumn":36},{"ruleId":"184","severity":1,"message":"185","line":128,"column":21,"nodeType":"186","endLine":129,"endColumn":23},{"ruleId":"150","replacedBy":"187"},{"ruleId":"152","replacedBy":"188"},{"ruleId":"154","severity":1,"message":"189","line":3,"column":8,"nodeType":"156","messageId":"157","endLine":3,"endColumn":15},{"ruleId":"158","severity":1,"message":"159","line":238,"column":34,"nodeType":"160","messageId":"161","endLine":238,"endColumn":36},{"ruleId":"158","severity":1,"message":"159","line":241,"column":39,"nodeType":"160","messageId":"161","endLine":241,"endColumn":41},{"ruleId":"158","severity":1,"message":"159","line":252,"column":14,"nodeType":"160","messageId":"161","endLine":252,"endColumn":16},{"ruleId":"158","severity":1,"message":"159","line":255,"column":19,"nodeType":"160","messageId":"161","endLine":255,"endColumn":21},{"ruleId":"158","severity":1,"message":"159","line":277,"column":31,"nodeType":"160","messageId":"161","endLine":277,"endColumn":33},{"ruleId":"158","severity":1,"message":"159","line":300,"column":31,"nodeType":"160","messageId":"161","endLine":300,"endColumn":33},{"ruleId":"154","severity":1,"message":"190","line":1,"column":16,"nodeType":"156","messageId":"157","endLine":1,"endColumn":25},{"ruleId":"154","severity":1,"message":"191","line":2,"column":42,"nodeType":"156","messageId":"157","endLine":2,"endColumn":50},{"ruleId":"154","severity":1,"message":"192","line":8,"column":8,"nodeType":"156","messageId":"157","endLine":8,"endColumn":15},{"ruleId":"154","severity":1,"message":"193","line":11,"column":8,"nodeType":"156","messageId":"157","endLine":11,"endColumn":20},{"ruleId":"154","severity":1,"message":"194","line":14,"column":8,"nodeType":"156","messageId":"157","endLine":14,"endColumn":12},{"ruleId":"154","severity":1,"message":"174","line":5,"column":10,"nodeType":"156","messageId":"157","endLine":5,"endColumn":16},{"ruleId":"154","severity":1,"message":"181","line":6,"column":25,"nodeType":"156","messageId":"157","endLine":6,"endColumn":31},{"ruleId":"154","severity":1,"message":"195","line":26,"column":8,"nodeType":"156","messageId":"157","endLine":26,"endColumn":12},{"ruleId":"158","severity":1,"message":"159","line":75,"column":33,"nodeType":"160","messageId":"161","endLine":75,"endColumn":35},{"ruleId":"158","severity":1,"message":"169","line":123,"column":25,"nodeType":"160","messageId":"161","endLine":123,"endColumn":27},{"ruleId":"158","severity":1,"message":"159","line":123,"column":63,"nodeType":"160","messageId":"161","endLine":123,"endColumn":65},{"ruleId":"158","severity":1,"message":"169","line":126,"column":30,"nodeType":"160","messageId":"161","endLine":126,"endColumn":32},{"ruleId":"158","severity":1,"message":"169","line":126,"column":68,"nodeType":"160","messageId":"161","endLine":126,"endColumn":70},{"ruleId":"158","severity":1,"message":"159","line":145,"column":50,"nodeType":"160","messageId":"161","endLine":145,"endColumn":52},"no-native-reassign",["196"],"no-negated-in-lhs",["197"],"no-unused-vars","'DropdownButton' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'columns' is assigned a value but never used.","'keys' is defined but never used.","'dataReducer' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Expected '!==' and instead saw '!='.","'IconButton' is defined but never used.","'CommentIcon' is defined but never used.","'StorageIcon' is defined but never used.","'MenuIcon' is defined but never used.","'Button' is defined but never used.","'checkDM' is defined but never used.","'checkComment' is defined but never used.","'checkFollow' is defined but never used.","'token' is assigned a value but never used.","'commentReply' is defined but never used.","'goToLead' is defined but never used.","'Column' is defined but never used.","'MTableBodyRow' is defined but never used.","'updateIsMarked' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["196"],["197"],"'history' is defined but never used.","'useEffect' is defined but never used.","'Redirect' is defined but never used.","'Comment' is defined but never used.","'CommentInbox' is defined but never used.","'Lead' is defined but never used.","'View' is defined but never used.","no-global-assign","no-unsafe-negation"]
=======
[{"F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\index.js":"1","F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\TwitterAccountInfo.js":"2","F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\history.js":"3","F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\Landing.js":"4","F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\DmInbox.js":"5","F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\CommentInbox.js":"6"},{"size":624,"mtime":1611778182715,"results":"7","hashOfConfig":"8"},{"size":3591,"mtime":1622095252396,"results":"9","hashOfConfig":"8"},{"size":389,"mtime":1612472598739,"results":"10","hashOfConfig":"8"},{"size":1304,"mtime":1622095252385,"results":"11","hashOfConfig":"8"},{"size":7614,"mtime":1622204267899,"results":"12","hashOfConfig":"8"},{"size":8911,"mtime":1622204283937,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"bcdjj6",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\index.js",[],["28","29"],"F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\TwitterAccountInfo.js",[],"F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\history.js",[],"F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\Landing.js",[],"F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\DmInbox.js",["30","31","32","33","34","35","36","37"],"F:\\my projects\\bot david\\project\\frontend\\twitter_bot_frontend\\src\\pages\\CommentInbox.js",["38","39","40","41","42","43","44"],"import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport MaterialTable, { Column, MTableBodyRow, TablePagination } from \"material-table\";\r\n\r\nimport './style.css'\r\n\r\nimport { forwardRef } from 'react';\r\n \r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { getAllData, updateIsMarkedComment, getCommentData} from \"./../api/DashboardFunction\";\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nclass CommentInbox extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hoveringOver: \"\"\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if( this.props.success === true ) return ;\r\n        // this.props.getCommentData();\r\n        this.props.getAllData();\r\n    }\r\n\r\n    handleRowHover = (event, propsData) => {\r\n        this.setState({hoveringOver: propsData.index});\r\n    }\r\n\r\n    handleRowHoverLeave = (event, propsData) => {\r\n        this.setState({hoveringOver: \"\"});\r\n    }\r\n\r\n    isMarkAsRead = (row) => {\r\n        return row.mark_as_read == false;\r\n    }\r\n\r\n    handleDisplayMessage = (event, data) => {\r\n        console.log(\"I am dat!!\", data);\r\n        // udpate is marked\r\n        const info = {\r\n            account_username: data.account_username,\r\n            to_username: data.to_username,\r\n            bot_number: data.bot_number,\r\n            profile: data.profile,\r\n            coming_time: data.coming_time,\r\n            content: data.content\r\n        }\r\n        this.props.updateIsMarkedComment(info)\r\n\r\n        localStorage.setItem('previous_content', data.content);\r\n        localStorage.setItem('link', data.link)\r\n        this.props.history.push(`/comment/${data.account_username}/${data.to_username}/${data.bot_number}/${data.profile}`)\r\n    }\r\n\r\n    dateCompare = (firstDate, secondDate) => {\r\n        const date1 = new Date(firstDate);\r\n        const date2 = new Date(secondDate);\r\n\r\n        if (date1 > date2)\r\n            return -1;\r\n\r\n        if (date1 < date2)\r\n            return 1;\r\n\r\n        return 0;\r\n    }\r\n\r\n    render() {\r\n        if ( this.props.success !== true ) {\r\n            return (\r\n                <div className=\"lds-grid\">\r\n                    <div style={{marginTop: \"100px\"}}><CircularProgress /></div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n        const reply_comment = this.props.reply_comment;\r\n        const { hoveringOver } = this.state;\r\n        let filtered_comment\r\n        if (reply_comment != undefined && this.props.bot_number == 0){\r\n            filtered_comment = reply_comment\r\n        }\r\n        else if (reply_comment != undefined && this.props.bot_number != 0){\r\n            filtered_comment = reply_comment.filter((item) => item.bot_number === this.props.bot_number)\r\n        }\r\n\r\n\r\n        return(\r\n            <div className=\"table\">\r\n                <MaterialTable\r\n                components={{\r\n                    Pagination: props => {\r\n                      return (\r\n                        <td>\r\n                          <table\r\n                            style={{\r\n                              position: 'fixed',\r\n                              bottom: 0,\r\n                              left: 0,\r\n                              width: '100%',\r\n                              height:'100%',\r\n                            }}\r\n                          >\r\n                            <tbody>\r\n                              <tr>\r\n                                <TablePagination {...props} />\r\n                              </tr>\r\n                            </tbody>\r\n                          </table>\r\n                        </td>\r\n                      );\r\n                    },\r\n                  }}\r\n                    icons={tableIcons}\r\n                    columns={[\r\n                        { title: \"Username\", field: \"to_username\", width: \"20%\" },\r\n                        { title: \"Account Username\", field: \"account_username\", width: \"20%\" },\r\n                        { title: \"Coming Time\", field: \"coming_time\"},\r\n                        { title: \"Message Content\", field: \"content\"},\r\n                        // { title: \"Save Time\", field: \"save_time\"},\r\n                        // { title: \"Link\", field: \"link\"},\r\n                        { title: \"Bot Number\", field: \"bot_number\"},\r\n                        { title: \"Browser Number\", field: \"profile\" },\r\n                    ]}\r\n                    data={filtered_comment}\r\n                    options={{\r\n                        // paging: false,\r\n                        // toolbar: false,\r\n                        pageSizeOptions: [25, 50],\r\n                        pageSize: 25,\r\n                        headerStyle: {\r\n                          backgroundColor: \"#378FC3\",\r\n                          color: \"#FFF\",\r\n                          fontSize: \"17px\",\r\n                          fontWeight: \"bold\"\r\n                        },\r\n                        rowStyle: rowData => ({\r\n                            backgroundColor: this.isMarkAsRead(rowData) ? \"rgba(255,255,255,0.902)\" : \"rgba(242,245,245,0.8)\",\r\n                            fontWeight: this.isMarkAsRead(rowData) ? \"bold\" : \"\",\r\n                            boxShadow: rowData.tableData.id === hoveringOver ? '0px 2px 18px 0px rgba(0,0,0,0.5)' : '',\r\n                        }),\r\n                        tableLayout: \"fixed\"\r\n                    }}\r\n                    title=\"\"\r\n                    components={{\r\n                        Row: props => {\r\n                            return (\r\n                            <MTableBodyRow\r\n                                {...props}\r\n                                onMouseEnter={e => this.handleRowHover(e, props)}\r\n                                onMouseLeave={e => this.handleRowHoverLeave(e, props)}\r\n                            />\r\n                            );\r\n                        },\r\n                    }}\r\n                    onRowClick = {this.handleDisplayMessage}\r\n                    // actions={[\r\n                    //     {\r\n                    //     icon: View,\r\n                    //     tooltip: \"View\",\r\n                    //     onClick: (event, rowData) =>\r\n                    //         {this.handleDisplayComment(rowData)}\r\n                    //     }\r\n                    // ]}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    success: state.success,\r\n    reply_comment: state.data.reply_comment,\r\n    bot_number: state.bot\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    getAllData,\r\n    getCommentData,\r\n    updateIsMarkedComment,\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CommentInbox)",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":5,"column":10,"nodeType":"51","messageId":"52","endLine":5,"endColumn":16},{"ruleId":"49","severity":1,"message":"53","line":6,"column":25,"nodeType":"51","messageId":"52","endLine":6,"endColumn":31},{"ruleId":"49","severity":1,"message":"54","line":26,"column":8,"nodeType":"51","messageId":"52","endLine":26,"endColumn":12},{"ruleId":"55","severity":1,"message":"56","line":75,"column":33,"nodeType":"57","messageId":"58","endLine":75,"endColumn":35},{"ruleId":"55","severity":1,"message":"59","line":124,"column":25,"nodeType":"57","messageId":"58","endLine":124,"endColumn":27},{"ruleId":"55","severity":1,"message":"56","line":124,"column":63,"nodeType":"57","messageId":"58","endLine":124,"endColumn":65},{"ruleId":"55","severity":1,"message":"59","line":127,"column":30,"nodeType":"57","messageId":"58","endLine":127,"endColumn":32},{"ruleId":"55","severity":1,"message":"59","line":127,"column":68,"nodeType":"57","messageId":"58","endLine":127,"endColumn":70},{"ruleId":"49","severity":1,"message":"53","line":5,"column":25,"nodeType":"51","messageId":"52","endLine":5,"endColumn":31},{"ruleId":"55","severity":1,"message":"56","line":73,"column":33,"nodeType":"57","messageId":"58","endLine":73,"endColumn":35},{"ruleId":"55","severity":1,"message":"59","line":120,"column":27,"nodeType":"57","messageId":"58","endLine":120,"endColumn":29},{"ruleId":"55","severity":1,"message":"56","line":120,"column":65,"nodeType":"57","messageId":"58","endLine":120,"endColumn":67},{"ruleId":"55","severity":1,"message":"59","line":123,"column":32,"nodeType":"57","messageId":"58","endLine":123,"endColumn":34},{"ruleId":"55","severity":1,"message":"59","line":123,"column":70,"nodeType":"57","messageId":"58","endLine":123,"endColumn":72},{"ruleId":"60","severity":1,"message":"61","line":185,"column":21,"nodeType":"62","endLine":195,"endColumn":23},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Column' is defined but never used.","'View' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]
>>>>>>> a8ec0490fa748f3a2ac879452d212df941fb7bee
