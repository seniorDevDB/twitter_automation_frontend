[{"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\history.js":"3","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\App.js":"4","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Comment.js":"5","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\actions\\actions.js":"6","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\DashboardFunction.js":"7","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Dashboard.js":"8","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\Socket.js":"9","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\store.js":"10","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\reducers\\index.js":"11","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Navbar.js":"12","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Login.js":"13","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\UserFunction.js":"14","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Message.js":"15","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\CommentInbox.js":"16","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\DmInbox.js":"17"},{"size":646,"mtime":1613391439098,"results":"18","hashOfConfig":"19"},{"size":375,"mtime":1613391439098,"results":"20","hashOfConfig":"19"},{"size":389,"mtime":1613391439098,"results":"21","hashOfConfig":"19"},{"size":1197,"mtime":1614250064154,"results":"22","hashOfConfig":"19"},{"size":5980,"mtime":1614785177765,"results":"23","hashOfConfig":"19"},{"size":1550,"mtime":1614784733506,"results":"24","hashOfConfig":"19"},{"size":6778,"mtime":1614783768097,"results":"25","hashOfConfig":"19"},{"size":19863,"mtime":1614760562819,"results":"26","hashOfConfig":"19"},{"size":631,"mtime":1613558610155,"results":"27","hashOfConfig":"19"},{"size":578,"mtime":1614343675096,"results":"28","hashOfConfig":"19"},{"size":2499,"mtime":1614785025674,"results":"29","hashOfConfig":"19"},{"size":8005,"mtime":1614347096263,"results":"30","hashOfConfig":"19"},{"size":4432,"mtime":1613611439395,"results":"31","hashOfConfig":"19"},{"size":671,"mtime":1613610287268,"results":"32","hashOfConfig":"19"},{"size":4883,"mtime":1614781866613,"results":"33","hashOfConfig":"19"},{"size":8847,"mtime":1614815128320,"results":"34","hashOfConfig":"19"},{"size":7777,"mtime":1614815159300,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"11fqzy7",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\index.js",[],["75","76"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\reportWebVitals.js",[],["77","78"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\history.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\App.js",["79","80"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Comment.js",["81","82","83","84"],"import { keys } from \"@material-ui/core/styles/createBreakpoints\";\r\nimport React, { Component } from \"react\";\r\nimport { Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport dataReducer from \"../store/reducers\";\r\nimport { displayComment, newComment } from \"./../api/DashboardFunction\";\r\n\r\nclass Comment extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            content: \"\",\r\n            username: \"\",\r\n            account_name: \"\",\r\n            bot_number: \"\",\r\n            profile: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"here\")\r\n        const account_name = this.props.match.params.account\r\n        const username = this.props.match.params.username;\r\n        const bot_number = this.props.match.params.num;\r\n        const profile = this.props.match.params.profile;\r\n        console.log(\"here is compoent\", username, bot_number, profile)\r\n        this.setState({username: username, bot_number: bot_number, profile: profile, account_name: account_name})\r\n        const data = {\r\n            username: username,\r\n            account_name: account_name,\r\n            bot_number: bot_number,\r\n            profile: profile\r\n        }\r\n        this.props.displayComment(data);\r\n    }\r\n\r\n    onChange = (e) => {\r\n        console.log(\"I am changed!!!!!!!!!!\", e.target.value);\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        console.log(\"kkk\", this.state.msg1)\r\n    }\r\n\r\n    sendMsg = () => {\r\n        console.log(\"send msg\", this.state.msg_content)\r\n        const data = {\r\n            username: this.state.username,\r\n            account_name: this.state.account_name,\r\n            bot_number: this.state.bot_number,\r\n            profile: this.state.profile,\r\n            content: this.state.msg_content,\r\n            previous_content: localStorage.getItem('previous_content'),\r\n            link: localStorage.getItem('link'),\r\n        }\r\n        console.log(\"data\", data)\r\n        this.props.newComment(data)\r\n        this.setState({msg_content: \"\"})\r\n        // newComment(data).then((res) => {\r\n        //     if (res.code == \"failed\"){\r\n        //         alert(res.message)\r\n        //     }\r\n        //     else {\r\n        //         alert(\"Comment sent\")\r\n        //         this.setState({msg_content: \"\"})\r\n        //     }\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        console.log(\"msg data\", this.props.comment_data)\r\n        const commentData = this.props.comment_data\r\n        console.log(\"mmm\", commentData)\r\n        return (\r\n            <div className=\"content-wrapper\">\r\n            <div className=\"card\">\r\n            <div className=\"no-gutters\">\r\n                <div className=\"chat-container\">\r\n                    <ul className=\"chat-box chatContainerScroll\">\r\n                        {commentData && commentData.message.map((data, index) => (\r\n                            data.coming_time != '' ? (\r\n                                <li className=\"chat-left\" key={index}>\r\n                                    <div className=\"chat-avatar\">                     \r\n                                        <div className=\"chat-name\">{data.to_username}</div>\r\n                                    </div>\r\n                                    <div className=\"chat-avatar\">                     \r\n                                        <div className=\"chat-name\">{data.account_username}</div>\r\n                                    </div>\r\n                                    <div class=\"chat-text\">\r\n                                        {data.content}\r\n                                    </div>\r\n                                    <div class=\"chat-hour\">{data.coming_time}</div>\r\n                                </li>) : (\r\n                                <li className=\"chat-right\" key={index}>\r\n                                    {data.new_reply || data.new_reply == false ? (\r\n                                        <div className=\"chat-hour\">\"Sent\"</div>\r\n                                    ) : (<div className=\"chat-hour\">\"Pending\"</div>)}\r\n                                    <div className=\"chat-hour\">{ data.coming_time }</div>\r\n                                    <div className=\"chat-text\">\r\n                                    { data.content }\r\n                                    </div>\r\n                                    <div className=\"chat-avatar\">                         \r\n                                        <div className=\"chat-name\">{ data.to_username}</div>\r\n                                    </div>\r\n                                    <div className=\"chat-avatar\">                     \r\n                                        <div className=\"chat-name\">{data.account_username}</div>\r\n                                    </div>\r\n                                </li>\r\n                            )\r\n                        ))}\r\n                    </ul>\r\n\r\n                    <div>\r\n                          <div style={{display:\"flex\"}}>\r\n                                <textarea rows=\"3\" onChange={this.onChange} id=\"msg-content\" name= \"msg_content\" value={this.state.msg_content} placeholder=\"Type your message here...\"></textarea>\r\n                                <Button onClick={this.sendMsg} style={{marginTop:\"auto\",marginBottom: \"auto\", marginLeft:\"20px\", padding: '10px 30px', height: '100%'}}>Send</Button>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    // comment_status: state.commentData.code,\r\n    // comment_data: state.commentData.message\r\n    comment_data: state.commentData\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    displayComment,\r\n    newComment\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Comment)","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\actions\\actions.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\DashboardFunction.js",["85","86","87","88","89"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Dashboard.js",["90","91","92","93","94","95","96","97","98","99"],"import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { Button } from 'react-bootstrap';\r\nimport MaterialTable, { Column } from \"material-table\";\r\n\r\nimport './style.css'\r\n\r\nimport { forwardRef } from 'react';\r\n \r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport View from \"@material-ui/icons/Visibility\";\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport { startBot, endBot, getAllData, checkDM, checkComment, checkNotification } from \"./../api/DashboardFunction\";\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n  };\r\n\r\nclass Dashboard extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data: {},\r\n            bot1_msg1: 'https://www.protectedtext.com/v1_msg1',\r\n            bot1_msg2: 'https://www.protectedtext.com/v1_msg2',\r\n            bot1_comment_msg: 'https://www.protectedtext.com/v_comment',\r\n            bot2_msg1: 'https://www.protectedtext.com/v2_msg1',\r\n            bot2_msg2: 'https://www.protectedtext.com/v2_msg2',\r\n            bot2_comment_msg: 'https://www.protectedtext.com/v_comment',\r\n            bot3_msg1: 'https://www.protectedtext.com/v3_msg1',\r\n            bot3_msg2: 'https://www.protectedtext.com/v3_msg2',\r\n            bot3_comment_msg: 'https://www.protectedtext.com/v_comment',\r\n            username_num: 100,\r\n            bot1_successful_dm: 0,\r\n            bot1_unsuccessful_dm: 0,\r\n            bot1_spintax1_reply: 0,\r\n            bot2_successful_dm: 0,\r\n            bot2_unsuccessful_dm: 0,\r\n            bot2_spintax1_reply: 0\r\n        };\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        console.log(\"real\",localStorage.usertoken)\r\n        if (localStorage.usertoken == undefined) {\r\n            window.location.href = \"/login\"\r\n        }\r\n        if( this.props.success === false ) {\r\n            this.props.getAllData();\r\n        }\r\n        console.log(\"SSSSSSSSSSSSSSSSS\")\r\n        console.log(this.props.data)\r\n        try {\r\n            setInterval(async () => {\r\n              this.props.checkNotification();\r\n            }, 10000);\r\n          } catch(e) {\r\n            console.log(e);\r\n          }\r\n    }\r\n\r\n    handleDisplayMessage = (data) => {\r\n        console.log(\"HERE\", data)\r\n        this.props.history.push(`/message/${data.username}/${data.bot_number}/${data.profile}`)\r\n        // window.location.href = \"/message/\"+data.username\r\n    }\r\n\r\n    handleDisplayComment = (data) => {\r\n        console.log(\"comment\", data)\r\n        localStorage.setItem('previous_content', data.content);\r\n        localStorage.setItem('link', data.link)\r\n        this.props.history.push(`/comment/${data.account_username}/${data.to_username}/${data.bot_number}/${data.profile}`)\r\n    }\r\n\r\n    handleStartAutomation = () => {\r\n        console.log(\"start Auto\")\r\n        const bot_info = {\r\n            bot1_msg1: this.state.bot1_msg1,\r\n            bot1_msg2: this.state.bot1_msg2,\r\n            bot1_comment_msg: this.state.bot1_comment_msg,\r\n            bot2_msg1: this.state.bot2_msg1,\r\n            bot2_msg2: this.state.bot2_msg2,\r\n            bot2_comment_msg: this.state.bot2_comment_msg,\r\n            bot3_msg1: this.state.bot3_msg1,\r\n            bot3_msg2: this.state.bot3_msg2,\r\n            bot3_comment_msg: this.state.bot3_comment_msg,\r\n            username_num: this.state.username_num,\r\n            status: \"start\"\r\n        }\r\n        startBot(bot_info).then((res) => {\r\n            if (res.code == \"failed\"){\r\n                alert(res.message)\r\n            }\r\n        })\r\n    }\r\n\r\n    handleEndAutomation = () => {\r\n        console.log(\"End Auto\")\r\n        const info = {\r\n            status: \"end\"\r\n        }\r\n        endBot(info).then((res) => {\r\n            if (res.code == \"failed\"){\r\n                alert(res.message)\r\n            } \r\n        })\r\n    }\r\n\r\n    onChange = (e) => {\r\n        console.log(\"I am changed!!!!!!!!!!\", e.target.value);\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        console.log(\"kkk\", this.state.msg1)\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            { title: \"Date\", field: \"date\" },\r\n            { title: \"Amount\", field: \"amount\" },\r\n            { title: \"Description\", field: \"description\" },\r\n            { title: \"Status\", field: \"status\" },\r\n            { title: \"Main Balance\", field: \"main_balance\" },\r\n        ];\r\n        console.log(this.props.data.report)\r\n        console.log(\"nnn\", this.props.reply_comment)\r\n        if( this.props.success === true ) {\r\n            return (\r\n                <div className=\"container\" style={{paddingTop:\"45px\"}}>\r\n                    <div className=\"control-div\">\r\n                        <Button variant=\"primary\" onClick = {this.handleStartAutomation}>Start Automation</Button>\r\n                        <Button variant=\"primary\" onClick = {this.handleEndAutomation}>End Automation</Button>\r\n                    </div>\r\n                    <div>\r\n                        <label>Number of the Usernames</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            className=\"form-control\"\r\n                            id=\"username_num\"\r\n                            name=\"username_num\"\r\n                            value={this.state.username_num}\r\n                        />\r\n                    </div>\r\n                    <div className=\"report-div row\">\r\n                        <div className=\"col-md-3 col-sm-3\">\r\n                            <h3>Bot1</h3>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Number of Usernames:</p> <b><p>{this.props.report.bot1_user_number}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Sent DMS:</p> <b><p>{this.props.report.bot1_successful_dm}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Unsuccessful DMS:</p> <b><p>{this.props.report.bot1_unsuccessful_dm}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Spintax Message 1 Replies:</p> <b><p>{this.props.report.bot1_spintax1_reply}</p></b>\r\n                            </div>\r\n\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Sent COMMENTS:</p> <b><p>{this.props.report.bot1_successful_comment}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Unsuccessful COMMENTS:</p> <b><p>{this.props.report.bot1_unsuccessful_comment}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Follow</p> <b><p>{this.props.report.bot1_follow}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Follow Back:</p> <b><p>{this.props.report.bot1_follow_back}</p></b>\r\n                            </div>\r\n\r\n                            \r\n                        </div>\r\n                        <div className=\"col-md-3 col-sm-3\">\r\n                            <h3>Bot2</h3>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Number of Usernames:</p> <b><p>{this.props.report.bot2_user_number}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Sent DMS:</p> <b><p>{this.props.report.bot2_successful_dm}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Unsuccessful DMS:</p> <b><p>{this.props.report.bot2_unsuccessful_dm}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Spintax Message 1 Replies:</p> <b><p>{this.props.report.bot2_spintax1_reply}</p></b>\r\n                            </div>\r\n\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Sent COMMENTS:</p> <b><p>{this.props.report.bot2_successful_comment}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Unsuccessful COMMENTS:</p> <b><p>{this.props.report.bot2_unsuccessful_comment}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Follow:</p> <b><p>{this.props.report.bot2_follow}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Follow Back:</p> <b><p>{this.props.report.bot2_follow_back}</p></b>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-3 col-sm-3\">\r\n                            <h3>Bot3</h3>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Number of Usernames:</p> <b><p>{this.props.report.bot3_user_number}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Sent DMS:</p> <b><p>{this.props.report.bot3_successful_dm}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Unsuccessful DMS:</p> <b><p>{this.props.report.bot3_unsuccessful_dm}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Spintax Message 1 Replies:</p> <b><p>{this.props.report.bot3_spintax1_reply}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Sent COMMENTS:</p> <b><p>{this.props.report.bot3_successful_comment}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Unsuccessful COMMENTS:</p> <b><p>{this.props.report.bot3_unsuccessful_comment}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Follow:</p> <b><p>{this.props.report.bot3_follow}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Follow Back:</p> <b><p>{this.props.report.bot3_follow_back}</p></b>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-3 col-sm-3\">\r\n                            <h3>Bot For Private Usernames</h3>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Follow:</p> <b><p>{this.props.report.follow}</p></b>\r\n                            </div>\r\n                            <div style={{display: \"flex\"}}>\r\n                                <p>Follow Back:</p> <b><p>{this.props.report.unfollow}</p></b>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-4 col-sm-4\">\r\n                            <h3 htmlFor=\"\">Bot1: First Spintax:</h3>\r\n                            <textarea onChange={this.onChange} id=\"bot1_msg1\" name=\"bot1_msg1\" rows=\"3\" cols=\"50\" value={this.state.bot1_msg1} />\r\n                        </div>\r\n                        <div className=\"col-md-4 col-sm-4\">\r\n                            <h3 htmlFor=\"\">Bot1: Second Spintax:</h3>\r\n                            <textarea onChange={this.onChange} id=\"bot1_msg2\" name=\"bot1_msg2\" rows=\"3\" cols=\"50\" value={this.state.bot1_msg2} />\r\n                        </div>\r\n                        <div className=\"col-md-4 col-sm-4\">\r\n                            <h3 htmlFor=\"\">Bot1: Comment:</h3>\r\n                            <textarea onChange={this.onChange} id=\"bot1_comment_msg\" name=\"bot1_comment_msg\" rows=\"3\" cols=\"50\" value={this.state.bot1_comment_msg} />\r\n                        </div>\r\n                        <div className=\"col-md-4 col-sm-4\">\r\n                            <h3 htmlFor=\"\">Bot2: First Spintax:</h3>\r\n                            <textarea onChange={this.onChange} id=\"bot2_msg1\" name=\"bot2_msg1\" rows=\"3\" cols=\"50\" value={this.state.bot2_msg1} />\r\n                        </div>\r\n                        <div className=\"col-md-4 col-sm-4\">\r\n                            <h3 htmlFor=\"\">Bot2: Second Spintax:</h3>\r\n                            <textarea onChange={this.onChange} id=\"bot2_msg2\" name=\"bot2_msg2\" rows=\"3\" cols=\"50\" value={this.state.bot2_msg2} />\r\n                        </div>\r\n                        <div className=\"col-md-4 col-sm-4\">\r\n                            <h3 htmlFor=\"\">Bot2: Comment:</h3>\r\n                            <textarea onChange={this.onChange} id=\"bot2_comment_msg\" name=\"bot2_comment_msg\" rows=\"3\" cols=\"50\" value={this.state.bot2_comment_msg} />\r\n                        </div>\r\n                        <div className=\"col-md-4 col-sm-4\">\r\n                            <h3 htmlFor=\"\">Bot3: First Spintax:</h3>\r\n                            <textarea onChange={this.onChange} id=\"bot3_msg1\" name=\"bot3_msg1\" rows=\"3\" cols=\"50\" value={this.state.bot3_msg1} />\r\n                        </div>\r\n                        <div className=\"col-md-4 col-sm-4\">\r\n                            <h3 htmlFor=\"\">Bot3: Second Spintax:</h3>\r\n                            <textarea onChange={this.onChange} id=\"bot3_msg2\" name=\"bot3_msg2\" rows=\"3\" cols=\"50\" value={this.state.bot3_msg2} />\r\n                        </div>\r\n                        <div className=\"col-md-4 col-sm-4\">\r\n                            <h3 htmlFor=\"\">Bot3: Comment:</h3>\r\n                            <textarea onChange={this.onChange} id=\"bot3_comment_msg\" name=\"bot3_comment_msg\" rows=\"3\" cols=\"50\" value={this.state.bot3_comment_msg} />\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"table\">\r\n                        <MaterialTable\r\n                            icons={tableIcons}\r\n                            columns={[\r\n                                { title: \"ID\", field: \"_id\" },\r\n                                { title: \"Username\", field: \"username\" },\r\n                                { title: \"Coming Message Time\", field: \"coming_time\"},\r\n                                { title: \"Message Content\", field: \"content\"},\r\n                                { title: \"Save Time\", field: \"save_time\"},\r\n                                { title: \"Bot Number\", field: \"bot_number\"},\r\n                                { title: \"Browser Number\", field: \"profile\" }\r\n                            ]}\r\n                            data={this.props.new_message}\r\n                            title=\"Coming DM Table\"\r\n                            actions={[\r\n                                {\r\n                                icon: View,\r\n                                tooltip: \"View\",\r\n                                onClick: (event, rowData) =>\r\n                                    {this.handleDisplayMessage(rowData)}\r\n                                }\r\n                            ]}\r\n                            options={{actionsColumnIndex: -1}}\r\n                        />\r\n                    </div>\r\n                    <div className=\"table\">\r\n                        <MaterialTable\r\n                            icons={tableIcons}\r\n                            columns={[\r\n                                { title: \"ID\", field: \"_id\" },\r\n                                { title: \"Username\", field: \"to_username\" },\r\n                                { title: \"Account Username\", field: \"account_username\"},\r\n                                { title: \"Coming Time\", field: \"coming_time\" },\r\n                                { title: \"Message Content\", field: \"content\"},\r\n                                { title: \"Save Time\", field: \"save_time\"},\r\n                                { title: \"Link\", field: \"link\"},\r\n                                { title: \"Bot Number\", field: \"bot_number\"},\r\n                                { title: \"Browser Number\", field: \"profile\" }\r\n                            ]}\r\n                            data={this.props.reply_comment}\r\n                            title=\"Comment History Table\"\r\n                            actions={[\r\n                                {\r\n                                icon: View,\r\n                                tooltip: \"View\",\r\n                                onClick: (event, rowData) =>\r\n                                    {this.handleDisplayComment(rowData)}\r\n                                }\r\n                            ]}\r\n                            options={{actionsColumnIndex: -1}}\r\n                        />\r\n                    </div> */}\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div >Coming Soon</div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    error: state.error,\r\n    pending: state.pending,\r\n    success: state.success,\r\n    data: state.data,\r\n    report: state.data.report,\r\n    new_message: state.data.new_message,\r\n    reply_comment: state.data.reply_comment,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    getAllData,checkNotification\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Dashboard)","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\Socket.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\store.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\store\\reducers\\index.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Navbar.js",["100","101","102","103","104"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport { checkDM, checkComment, checkFollow, clearNotification} from \"./../api/DashboardFunction\";\r\n\r\nimport { useHistory } from \"react-router\";\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  menu: {\r\n    color: '#fff',\r\n    marginRight: '15px',\r\n    '&:hover': {\r\n      color: '#42f59b'\r\n    }\r\n  },\r\n  faq: {\r\n    color: '#fff',\r\n    marginRight: '20px',\r\n    marginTop: '4px',\r\n    '&:hover': {\r\n      color: '#42f59b'\r\n    }\r\n  }\r\n}));\r\n\r\nconst Navbar = ({handleDrawerOpen, hasHamburger, open, hanldeModalState, dmNotification, commentNotification, clearNotification}) => {\r\n    const classes = useStyles();\r\n    const token = localStorage.usertoken;\r\n    const history = useHistory();\r\n    \r\n\r\n    function login (){\r\n      window.location.href = \"/login\";\r\n    }\r\n\r\n    function logout () {\r\n      console.log(\"logout\")\r\n      //call api to update login status\r\n      const token = localStorage.usertoken;\r\n      console.log(\"tt\", token)\r\n      localStorage.clear();\r\n      window.location.href = \"/login\";\r\n    }\r\n\r\n    function commentReply() {\r\n        console.log(\"comment reply\")\r\n        clearNotification(\"comment\")\r\n        history.push({pathname: '/comment-inbox'});\r\n    }\r\n\r\n    function dmReply() {\r\n        clearNotification(\"dm\")\r\n        history.push({pathname: '/dm-inbox'});\r\n    }\r\n\r\n    function GoToHome() {\r\n        window.location.href = \"/\";\r\n    }\r\n\r\n    function handleCheckDM () {\r\n        console.log(\"check dm clicked\")\r\n        checkDM().then((res) => {\r\n            if (res.code == \"failed\"){\r\n                alert(res.message)\r\n            } \r\n        })\r\n    }\r\n\r\n    function handleCheckFollow () {\r\n        console.log(\"check follow clicked\")\r\n        checkFollow().then((res) => {\r\n            if (res.code == \"failed\"){\r\n                alert(res.message)\r\n            } \r\n        })\r\n    }\r\n\r\n    function handleCheckComment () {\r\n        checkComment().then((res) => {\r\n            if (res.code == \"failed\") {\r\n                alert(res.message)\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)} style={{backgroundColor: \"darkgreen\"}}>\r\n            <Toolbar className={classes.toolbar}>\r\n            {hasHamburger && <IconButton\r\n                edge=\"start\"\r\n                color=\"inherit\"\r\n                aria-label=\"open drawer\"\r\n                onClick={handleDrawerOpen}\r\n                className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n            >\r\n                <MenuIcon />\r\n            </IconButton>}\r\n            <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n              {/* Dashboard */}\r\n            </Typography>\r\n          \r\n            {localStorage.usertoken ? \r\n              <div>\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ GoToHome }>\r\n                  Home\r\n                </Typography>\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ commentReply }>\r\n                {\r\n                    commentNotification && \r\n                    <Badge color=\"error\" badgeContent=\" \" variant=\"dot\">\r\n                        Comment\r\n                    </Badge>\r\n                }\r\n                {\r\n                    !commentNotification && \"Comment\"\r\n                }\r\n                \r\n                </Typography>\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ dmReply }>\r\n                {\r\n                    dmNotification && \r\n                    <Badge color=\"error\" badgeContent=\" \" variant=\"dot\">\r\n                        DM\r\n                    </Badge>\r\n                }\r\n                {\r\n                    !dmNotification && \"DM\"\r\n                }\r\n                </Typography>\r\n                <Button className={`${classes.menu} float-left`} variant=\"primary\" onClick = {handleCheckDM}>Check Coming DM</Button>\r\n                <Button className={`${classes.menu} float-left`} variant=\"primary\" onClick = {handleCheckComment}>Check Comment Reply</Button>\r\n                <Button className={`${classes.menu} float-left`} variant=\"primary\" onClick = {handleCheckFollow}>Check Follow Back</Button>\r\n                <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-right`} color=\"inherit\" onClick={ logout }>\r\n                  Logout\r\n                </Typography>\r\n              </div> :\r\n              <div>\r\n                {/* <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-left`} color=\"inherit\" onClick={ () => { window.location.href = \"/register\"} }>\r\n                  Signup\r\n                </Typography> */}\r\n                  <Typography component=\"h1\" variant=\"h6\" className={`${classes.menu} float-right`} color=\"inherit\" onClick={ login }>\r\n                  Login\r\n                </Typography>\r\n              </div>\r\n          }\r\n           </Toolbar>\r\n      </AppBar>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    dmNotification: state.dmNotification,\r\n    commentNotification: state.commentNotification\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    clearNotification\r\n}, dispatch);\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Navbar)","C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Login.js",["105"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\api\\UserFunction.js",[],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\Message.js",["106","107","108","109"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\CommentInbox.js",["110","111","112","113","114","115"],"C:\\Users\\Administrator\\Desktop\\twitter_automation_frontend\\src\\pages\\DmInbox.js",["116","117","118","119","120","121","122"],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"123","replacedBy":"127"},{"ruleId":"125","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":16,"nodeType":"131","messageId":"132","endLine":1,"endColumn":25},{"ruleId":"129","severity":1,"message":"133","line":2,"column":42,"nodeType":"131","messageId":"132","endLine":2,"endColumn":50},{"ruleId":"129","severity":1,"message":"134","line":1,"column":10,"nodeType":"131","messageId":"132","endLine":1,"endColumn":14},{"ruleId":"129","severity":1,"message":"135","line":6,"column":8,"nodeType":"131","messageId":"132","endLine":6,"endColumn":19},{"ruleId":"136","severity":1,"message":"137","line":80,"column":46,"nodeType":"138","messageId":"139","endLine":80,"endColumn":48},{"ruleId":"136","severity":1,"message":"140","line":94,"column":71,"nodeType":"138","messageId":"139","endLine":94,"endColumn":73},{"ruleId":"129","severity":1,"message":"141","line":3,"column":8,"nodeType":"131","messageId":"132","endLine":3,"endColumn":15},{"ruleId":"136","severity":1,"message":"140","line":184,"column":34,"nodeType":"138","messageId":"139","endLine":184,"endColumn":36},{"ruleId":"136","severity":1,"message":"140","line":187,"column":39,"nodeType":"138","messageId":"139","endLine":187,"endColumn":41},{"ruleId":"136","severity":1,"message":"140","line":198,"column":14,"nodeType":"138","messageId":"139","endLine":198,"endColumn":16},{"ruleId":"136","severity":1,"message":"140","line":201,"column":19,"nodeType":"138","messageId":"139","endLine":201,"endColumn":21},{"ruleId":"129","severity":1,"message":"142","line":6,"column":8,"nodeType":"131","messageId":"132","endLine":6,"endColumn":21},{"ruleId":"129","severity":1,"message":"143","line":6,"column":25,"nodeType":"131","messageId":"132","endLine":6,"endColumn":31},{"ruleId":"129","severity":1,"message":"144","line":26,"column":8,"nodeType":"131","messageId":"132","endLine":26,"endColumn":12},{"ruleId":"129","severity":1,"message":"145","line":28,"column":40,"nodeType":"131","messageId":"132","endLine":28,"endColumn":47},{"ruleId":"129","severity":1,"message":"146","line":28,"column":49,"nodeType":"131","messageId":"132","endLine":28,"endColumn":61},{"ruleId":"129","severity":1,"message":"147","line":30,"column":7,"nodeType":"131","messageId":"132","endLine":30,"endColumn":17},{"ruleId":"136","severity":1,"message":"140","line":78,"column":36,"nodeType":"138","messageId":"139","endLine":78,"endColumn":38},{"ruleId":"136","severity":1,"message":"140","line":124,"column":26,"nodeType":"138","messageId":"139","endLine":124,"endColumn":28},{"ruleId":"136","severity":1,"message":"140","line":136,"column":26,"nodeType":"138","messageId":"139","endLine":136,"endColumn":28},{"ruleId":"129","severity":1,"message":"148","line":149,"column":15,"nodeType":"131","messageId":"132","endLine":149,"endColumn":22},{"ruleId":"129","severity":1,"message":"149","line":4,"column":8,"nodeType":"131","messageId":"132","endLine":4,"endColumn":18},{"ruleId":"129","severity":1,"message":"150","line":120,"column":11,"nodeType":"131","messageId":"132","endLine":120,"endColumn":16},{"ruleId":"136","severity":1,"message":"140","line":155,"column":26,"nodeType":"138","messageId":"139","endLine":155,"endColumn":28},{"ruleId":"136","severity":1,"message":"140","line":164,"column":26,"nodeType":"138","messageId":"139","endLine":164,"endColumn":28},{"ruleId":"136","severity":1,"message":"140","line":172,"column":26,"nodeType":"138","messageId":"139","endLine":172,"endColumn":28},{"ruleId":"129","severity":1,"message":"149","line":3,"column":8,"nodeType":"131","messageId":"132","endLine":3,"endColumn":18},{"ruleId":"129","severity":1,"message":"134","line":1,"column":10,"nodeType":"131","messageId":"132","endLine":1,"endColumn":14},{"ruleId":"129","severity":1,"message":"135","line":6,"column":8,"nodeType":"131","messageId":"132","endLine":6,"endColumn":19},{"ruleId":"136","severity":1,"message":"137","line":69,"column":46,"nodeType":"138","messageId":"139","endLine":69,"endColumn":48},{"ruleId":"136","severity":1,"message":"140","line":80,"column":71,"nodeType":"138","messageId":"139","endLine":80,"endColumn":73},{"ruleId":"129","severity":1,"message":"151","line":5,"column":10,"nodeType":"131","messageId":"132","endLine":5,"endColumn":16},{"ruleId":"129","severity":1,"message":"143","line":6,"column":25,"nodeType":"131","messageId":"132","endLine":6,"endColumn":31},{"ruleId":"129","severity":1,"message":"144","line":26,"column":8,"nodeType":"131","messageId":"132","endLine":26,"endColumn":12},{"ruleId":"136","severity":1,"message":"140","line":73,"column":33,"nodeType":"138","messageId":"139","endLine":73,"endColumn":35},{"ruleId":"136","severity":1,"message":"140","line":88,"column":26,"nodeType":"138","messageId":"139","endLine":88,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":184,"column":21,"nodeType":"154","endLine":194,"endColumn":23},{"ruleId":"129","severity":1,"message":"151","line":5,"column":10,"nodeType":"131","messageId":"132","endLine":5,"endColumn":16},{"ruleId":"129","severity":1,"message":"143","line":6,"column":25,"nodeType":"131","messageId":"132","endLine":6,"endColumn":31},{"ruleId":"129","severity":1,"message":"144","line":26,"column":8,"nodeType":"131","messageId":"132","endLine":26,"endColumn":12},{"ruleId":"129","severity":1,"message":"155","line":28,"column":10,"nodeType":"131","messageId":"132","endLine":28,"endColumn":18},{"ruleId":"129","severity":1,"message":"156","line":28,"column":20,"nodeType":"131","messageId":"132","endLine":28,"endColumn":26},{"ruleId":"136","severity":1,"message":"140","line":72,"column":33,"nodeType":"138","messageId":"139","endLine":72,"endColumn":35},{"ruleId":"136","severity":1,"message":"140","line":87,"column":26,"nodeType":"138","messageId":"139","endLine":87,"endColumn":28},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],["157"],["158"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'keys' is defined but never used.","'dataReducer' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'history' is defined but never used.","'MaterialTable' is defined but never used.","'Column' is defined but never used.","'View' is defined but never used.","'checkDM' is defined but never used.","'checkComment' is defined but never used.","'tableIcons' is assigned a value but never used.","'columns' is assigned a value but never used.","'jwt_decode' is defined but never used.","'token' is assigned a value but never used.","'Button' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'startBot' is defined but never used.","'endBot' is defined but never used.","no-global-assign","no-unsafe-negation"]